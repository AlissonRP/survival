Now for the primary function.
The user may have a list of tests, or a single term.
The first part of the function does the usual of grabbing arguments
and then checking them.
The fit object has to have the standard stuff: terms, assign, xlevels
and contrasts. 
Attributes of the terms are used often enough that we copy them
to \code{Tatt} to save typing.
We will almost certainly need the model frame and/or model matrix as
well.

In the discussion below I use x1 to refer to the covariates/terms that are
the target, e.g. \code{test='Mask'} to get the mean population values for
each level of the Mask variable in the solder data set, and x2 to refer to
all the other terms in the model, the ones that we average over.  
These are also referred to as U and V in the vignette.

<<yates>>=
yates <- function(fit, term, population=c("data", "none", "factorial", "sas"),
                  type="linear", method=c("direct", "sgtt"), 
                  dispersion, ...) {
    if (missing(fit)) stop("a fit argument is required")
    Terms <- try(terms(fit), silent=TRUE)
    if (inherits(Terms, "try-error"))
        stop("the fit does not have a terms structure")
    else Terms <- delete.response(Terms)   # y is not needed
    Tatt <- attributes(Terms)
    xassign <- fit$assign
    nvar <- length(xassign)
    nterm <- length(Tatt$term.names)
    termname <- rownames(Tatt$factors)

    # a flaw in delete.response: it doesn't subset dataClasses
    temp<- Tatt$dataClasses[row.names(Tatt$factors)]
    iscat <- sapply(temp, function(x) x %in% c("character", "factor"))
    
    if (missing(method)) method <- "direct"
    method <- match.arg(casefold(method), c("direct", "sgtt")) #allow SGTT
    if (method=="sgtt" && missing(population)) population <- "sas"

    if (is.character(population)) {
        population <- match.arg(tolower(population[1]),
                                c("data", "none", "factorial", "sas",
                                  "empirical", "yates"))
        if (population=="empirical") population <- "data"
        if (population=="yates") population <- "factorial"
    }
    else {
        if (!inherits(population, "data.frame"))
            stop("the population argument must be a data frame or character")
        pdata <- population
        population <- "user"
        }
 
    if (method=="sgtt" && (population !="sas" || type != "linear"))
        stop("sgtt method only applies if population = sas and type = linear")

    beta <-  coef(fit)
    nabeta <- is.na(beta)  # undetermined coefficients
    vmat <-  vcov(fit, complete=FALSE)
    
    # grab the dispersion
    if (missing(dispersion)) do.ss <- FALSE
    else do.ss <- dispersion
    if (class(fit)[1] =="lm") {
        if (missing(dispersion)) do.ss <- TRUE
        sigma <- summary(fit)$sigma
        }
    else if(class(fit)[1]=="glm") {
        sigma <- summary(fit)$dispersion
#        if (is.null(sigma)) sigma <- 1
        }
    else sigma <- NULL
    
    # process the term argument and check its legality
    <<yates-setup-term>>    
 
    # set up for checking estimability, if necessary
    <<yates-estim-setup>>
    
    # we will need the original model frame
    mframe <- fit$model
    if (is.null(mframe)) mframe <- model.frame(fit)
  
    # define the functions that actually do the work
    if (population=="none") {
        <<yates-nopop>>
    }
    else if (type=="linear") {
        <<yates-linear>>
    }
    else {
        stop("nonlinear portion yet to be writen")
        <<yates-nonlinear>>
    }
 
    # process the terms
    #  if the argument is a list of terms, the dummy function simply iterates
    #  over the list, or sublists of list elements, etc.
    dummy <- function(x) {
        if (inherits(x, "cmatrix")) doterm(x, method, population)
        else lapply(x, dummy)
    }
    result <- dummy(term)
    class(result) <- "yates"
    result
}
@

The first task of setting things up is farmed out to the \code{cmatrix}
routine.  
The original thought for yates was that the term argument would be a
list of terms, and you would bundle all the work for a model together into
one amalgamated call.  
As testing of the routine has proceeded this looks less and less like a
needed feature, but the code remains, in which case yates will produce
a list (which print.yates can't currently handle). 
To make it easier for users, we set up a local environment so that they
can use \code{cm(term, ...)} within the yates call, 
as a shorthand for \code{cmatrix(fit, term, ...)}

<<yates-setup-term>>=
# a bit of trickery to allow user to type "cm()" instead of cmatrix
ff <- parent.frame()
tempenv <- new.env(parent=ff)
assign("cm", function(...) cmatrix(fit, ...), envir=tempenv)
term <- eval(substitute(term), tempenv)
if (is.character(term) || inherits(term, "formula"))
    term <- cmatrix(fit, term)

# check that the term argument is legal: each element should have
#  class "cmatrix"
# it can be a list or nested list of such elements, with optional names
legal <- function(x) {
    if (inherits(x, "cmatrix")) TRUE
    else if (is.list(x)) all(sapply(x, legal))
    else FALSE
}
if (!legal(term))
    stop("the term argument should contain elements of class cmatrix")
@ 

Now check that the resulting term argument is legal.
<<cmatrix-term>>=
# each element of term should have class "cmatrix".  It can be
#  a singleton, a list, or a nested list of such elements
legal <- function(x) {
    if (inherits(x, "cmatrix")) TRUE
    else if (is.list(x)) all(sapply(x, legal))
    else FALSE
}
if (!legal(term))
    stop("the term argument should contain elements of class cmatrix")
@ 

Models with factor variables may often lead to population predictions that
involve non-estimable functions, particularly if there are interactions
or the user specifies a factorial population.  
If there are any missing coefficients we have to do formal checking for
this: any given row of the new $X$ matrix, for prediction, must be in the
row space of the original $X$ matrix. 
If this is true then a regression of a new row on the old $X$ will have 
residuals of zero.
It is not possible to derive this from the pattern of NA coefficients alone.
Set up a function that returns a true/false vector of whether each row of
a matrix is estimable.  This test isn't relevant if population=none.

<<yates-estim-setup>>=
Xold <- model.matrix(fit)
if (!any(is.na(beta)) || population == "none") 
    estimcheck <- NULL
else {
    if (inherits(fit, "coxph")) X.qr <- qr(rbind(1, t(Xold)))
    else  X.qr <- qr(t(Xold))   # QR decomposition of the row space
    estimcheck <- function(x, eps= sqrt(.Machine$double.eps)) {
        temp <- qr.resid(X.qr, t(x))
        apply(abs(temp), 1, function(x) all(x < eps))
    }
}
@ 

When the prediction target is $X\beta$ there is a four step
process: build the reference population, create the list of X matrices
(one prediction matrix for each for x1 value), 
column means of each X form each row of the
contrast matrix Cmat, and then use Cmat to get the mpv values and
tests of the mpv values.

<<yates-linear>>=
doterm <- function(contr, method, population, type) {
    if (is.na(match(contr$termname, colnames(Tatt$factors))))
        stop("term '", contr$termname, "' not found in the model")
    
    <<yates-build-pop>>
    <<yates-xmat>>
    Cmat <- t(sapply(xmatlist, colMeans))
    Cest <- sapply(xmatest, all)  # TRUE if all rows of xmatlist are estimable
    # coxph model: build the X matrix as though an intercept were there (the
    #  baseline hazard plays that role), and then drop it from the coefficients
    if (inherits(fit, "coxph")) Cmat <- Cmat[,-1, drop=FALSE]
    
    # Get the MPV estimates
    etemp <- estfun(Cmat, beta, vmat)
    estimate <- cbind(x1data, mpv= ifelse(Cest, etemp$estimate, NA),
                      std = ifelse(Cest, sqrt(diag(etemp$var)), NA))
    
    # Now do tests on the MPV estimates, one by one
    if (method=="sgtt") {
        <<yates-sgtt>>
    }
    else {
        if (is.list(contr$cmat)) {
            test <- t(sapply(contr$cmat, function(x)
                testfun(x %*% Cmat, beta, vmat, sigma^2)))
            natest <- sapply(contr$cmat, nafun, estimate$mpv)
        }
        else {
            test <- testfun(contr$cmat %*% Cmat, beta, vmat, sigma^2)
            test <- matrix(test, nrow=1, 
                           dimnames=list(contr$termname, names(test)))
            natest <- nafun(contr$cmat, estimate$mpv)
        }
        if (any(natest)) test[natest,] <- NA
    }
    #list(estimate=estimate, test=test, mvar=etemp$var, 
    #     xmatlist=xmatlist)   # temporary debug line
    list(estimate=estimate, test=test, mvar=etemp$var)
}
@ 

Build the population data set.  This has two slightly different paths,
creation of a raw data set or of a model frame.
When population=data we create a model frame since that is what is readily
available, either already present as the \code{model} argument of the 
fit object, or via a call to model.frame(fit).  It could actually be
quite hard to recreate the raw data, e.g. for a spline term.
For population=user we will have raw data, obviously.  The task in that
case is to verify that the data has all the needed variables.
For population = factorial we build our own data set out of 
fit$xlevels.

For population=sas we need a mixture: categoricals are factorial and others
are data.  Say there were categoricals with 3 and 5 levels, so the factorial
data set has 15 obs, while the overall n is 50.  We need a data set of 15*50
observations to ensure all combinations of the two categoricals with each
continuous line.
If the primary model didn't have any x1*x2*continuous
interactions we might get by with less, but its not worth the programming
effort since pop=sas is really here to prove that we know what SAS glm actually
does.

An issue  with data vs model is names.  Suppose the original model was
\code{coxph(Surv(time, status) ~ ns(age,4) + factor(ph.ecog), lung)}.
In the data set the variable name is ph.ecog, in the model frame,
the xlevels list, and terms structure it is factor(ph.ecog). 
The data frame has individual columns for the four variables, the model frame
is a list with 3 elements, one of which is named ``ns(age, 4)'': notice the
extra space before the 4 compared to what was typed.

When building our own (factorial) we start with a model frame and then
expand it, to get the right names in the right order.
For a user population the starting names are recovered using the vnames
vector, but its logic
is imperfect for a model with \code{ns(age, df=zed)} where 'zed' was some
global variable.  The code below will expect to find zed in the the
user's data frame.  Such a case may never arise (we hope).

<<yates-build-pop>>=
vnames <- lapply(Tatt$variables, all.vars)[-1]  # first element was "list"
x1indx <- (Tatt$factors[,contr$termname] >0)      # which variables(s) in x1
x2indx <- !x1indx
if (population=="data") pdata <- mframe  #easy case
else if (population=="factorial") {
    if (any(!iscat[x2indx]))
        stop("population=factorial only applies if all the adjusting terms are categorical")
    x2name <- names(x2indx)[x2indx]
    n2 <- sapply(fit$xlevels[x2name], length)
    n <- prod(n2)
    pdata <- mframe[rep(1, length=n),]
    row.names(pdata) <- NULL
    n1 <- 1
    for (i in 1:length(n2)) {
        j <- rep(rep(1:n2[i], each=n1), length=n)
        pdata[x2name[i]] <- (fit$xlevels[[x2name[i]]])[j]
        n1 <- n1 * n2[i]
    }
} else if (population=="user") {
    hit <- sapply(vnames, function(x) all(x %in% names(pdata)))
    # any right-hand side which is found, leave it alone, not found=error
    if (any(!hit[x2indx])) {
        i <- (which(x2indx))[!hit[x2indx]]
        stop("terms with variables not found in data: ", termname[i])
    }
} else if (population=="sas") {
    # we need the population for the MPV values
    pdata <- mframe
    if (all(iscat[x2indx])) n1 <- 1 else n1 <- nrow(mframe)
    if (any(iscat[x2indx])) {
        x2name <- names(x2indx)[x2indx]
        n2 <- sapply(fit$xlevels[x2name], length)
        n <- n1*prod(n2)
        pdata <- pdata[rep(1:n1, length=n),]  # the continous variables are done
        browser()
        for (i in seq(along=x2name)) {
            j <- rep(rep(1:n2[i], each=n1), length=n)
            pdata[x2name[i]] <- (fit$xlevels[[x2name[i]]])[j]
            n1 <- n1 * n2[i]
        }
    } else pdata <- mframe  #no categoricals
}
@ 

The next section builds a set of X matrices, one for each level of the
x1 combination. 
The levels component of the contrast is a data frame containing the x1
values.  If pdata is a modelframe, and the names \emph{and dataclass} 
in levels matches up then we simply paste in columns.
The \code{xlevels} component of the fit will contain character strings
while the model frame might contain characters or it might have factors;
when pasting into a model frame we need to get it right.

If the user added their own levels and pdata is a modelframe, then 
transform the x1 values to their final form and paste them on.
If data=user and x1 was generated from fit$xlevels, then we might have
an x1 of ``factor(ph.ecog)'', and have to untransform it.  That is the
hardest case.
The last step in each is to replace an non-estimable row by NA, which will
cause NA to propogate in further calculations.
<<yates-xmat>>=
if (is.null(contr$levels)) stop("levels are missing for this contrast")
x1data <- as.data.frame(contr$levels)  # in case it is a list
xmatlist <- vector("list", nrow(x1data))
xmatest  <- xmatlist  # estimability
if (is.null(attr(pdata, "terms"))) {
    # pdata is a data frame, variable order does not matter
    pdata <- pdata[, !(names(pdata) %in% names(x1data))]
    np <- nrow(pdata)
    for (i in 1:nrow(x1data)) {
        j <- rep(i, np)
        tdata <- cbind(pdata, x1data[j,,drop=FALSE]) # new data set
        xmatlist[[i]] <- model.matrix(Terms, tdata, xlev=fit$xlevels,
                                      contrast.arg= fit$contrasts)
        if (is.null(estimcheck)) xmatest[[i]] <- TRUE
        else xmatest[[i]] <- estimcheck(xmatlist[[i]])
    }
} else {
    # pdata is a model frame, convert x1data
    # if the name agrees but not the class, do a simple conversion
    # if names don't agree, call model.frame
    index <- match(names(x1data), names(pdata), nomatch=0)
    if (all(index >0)) { # names agree
        for  (i in names(x1data)) {
            if (Tatt$dataClasses[i] == "factor" && 
                !inherits(x1data[[i]], 'factor'))  { # the common case
                x1data[[i]] <- factor(x1data[[i]], fit$xlevels[[i]])
                if (any(is.na(x1data[[i]])))
                    warning("unrecognized levels for ", i)
            }
            else if (!inherits(x1data[[i]], Tatt$dataClasses[i]))
                stop("class mismatch in predictor", i)
        }
        for (i in 1:nrow(x1data)) {
            j <- rep(i, nrow(pdata))
            tdata <- pdata
            tdata[,names(x1data)] <- x1data[j,]
            xmatlist[[i]] <- model.matrix(Terms, tdata, xlev=fit$xlevels,
                                      contrast.arg= fit$contrasts)
            if (is.null(estimcheck)) xmatest[[i]] <- TRUE
            else xmatest[[i]] <- estimcheck(xmatlist[[i]])
         }
    }
    else if (any(index > 0)) {
        # some names match and some don't
        stop("impossible match in yates, contact author")
    }
    else {
        # create a subset of the terms structure, for x1 only
        x1term <- Terms[which(x1indx)]
        x1name <- names(x1indx)[x1indx]
        attr(x1term, "dataClasses") <- Tatt$dataClasses[x1name] # R bug
        x1frame <- model.frame(x1term, x1data, xlev=fit$xlevels[x1name])
        for (i in 1:nrow(x1data)) {
            j <- rep(i, nrow(pdata))
            tdata <- pdata
            tdata[,names(x1frame)] <- x1frame[j,]
            xmatlist[[i]] <- model.matrix(Terms, tdata, xlev=fit$xlevels,
                                      contrast.arg= fit$contrasts)
            if (is.null(estimcheck)) xmatest[[i]] <- TRUE
            else xmatest[[i]] <- estimcheck(xmatlist[[i]])
        }
    }
}      
@ 

<<yates-build-none>>=
#  The population="none" case. contr will be a cmatrix object
index <- match(contr$termname, Tatt$term.labels)
whichcol <- which(xassign %in% index)  #columns to fill in
ncol <- length(whichcol)
if (is.null(contr$levels)) {
    # population = none is the one case where we allow values for 
    #  x1 to be unspecified.  
    apv <- matrix(0., nrow=ncol, ncol=nvar)
    apv[,whichcol] <- diag(ncol)
}
else {
    apv <- matrix(0., nrow=nrow(contr$levels), ncol=nvar)
}    
    
ncoef <- length(xassign)
whichcol <- which(xassign %in% index)  #columns to fill in
clevel <- contr$levels
nullcontr <- sapply(clevel, is.null)
if (all(nullcontr)) {
    Xmat <- matrix(0., nrow=length(whichcol), ncol=ncoef)
    Xmat[,whichcol] <- diag(length(whichcol))
}
else if (any(nullcontr))                            
    stop("can't handle this type of mixed term, yet")
else {
    # Get the inner part of each name, e.g, ns(age, df=3) turns into "age".
    #  The line below is killing a fly with a triphammer, but we only run
    #  it once.  
    pname <- names(clevel)
    for (i in 1:length(pname)) pname[i] <- all.vars(parse(text=pname[i]))[1]
    
    if (!is.data.frame(clevel)) clevel <- do.call("expand.grid", clevel)
    Xmat <- matrix(0., nrow=nrow(clevel), ncol=ncoef)
    for (i in 1:ncol(clevel)) {
        cname <- names(clevel)[i]
        ccol <- which(xassign== index[i])
        if (contr$iscat[i]) {
            if (length(ccol) < length(fit$xlevels[[cname]])) 
                temp <- get(fit$contrasts[[cname]])(length(ccol))
            else temp <- get(fit$contrasts[[cname]])(length(ccol),
                                                     contrasts=FALSE)
            Xmat[,ccol] <- temp[match(clevel[[i]], fit$xlevels[[cname]]),]
        }
        else { # continuous
            j <- match(cname, row.names(Tattr$factors))
            pcall <- Tattr$predictCall[[j+1]] #skip the "list" element
            if (is.call(pcall)) {
                temp <- list(clevel[[i]])
                names(temp) <- pname[i]
                Xmat[,ccol] <- eval(pcall, temp)
            }
            else if (is.name(temp)) {
                if (length(ccol) !=1) stop("logic error")
                Xmat[,ccol] <- clevel[[i]]
            }
            else stop("logic error 2")  #should be impossible
        }
    }
}
@ 

Now go through the contrast matrices 1 by 1 and evaluate them.
<<yates-build-none>>=
if (is.list(contr$cmatrix)) 
    r1 <- sapply(contr$cmatrix, function(z) cfun(z, beta, vmat, sigma^2))
else r1 <- cfun(contr$cmatrix, beta, vmat, sigma^2)
@ 
 
<<yates-nonlinear>>=
@ 

<<yates-nopop>>=
@ 


The decompostion based algorithm for SAS type 3.
The algorithm will ignore the set of contrasts cmat, since this algorithm
creates a global test for all the terms at once.
First make a Z matrix, which is the X matrix using only the unique
categorical variable rows, then create a generalized cholesky
decomposition of Z.
<<yates-sgtt>>=
whichrows <- !duplicated(mframe[names(iscat[iscat])])
Z <- model.matrix(Terms, mframe[whichrows,])
browser()
@ 


The print routine places the population predicted values (PPV) alongside the
tests on those values.  Defaults are copied from printCoefmat.

<<yates>>=
print.yates <- function(x, digits = max(3, getOption("digits") -2),
                        dig.tst = max(1, min(5, digits-1)),
                        eps=1e-8, ...) {
    temp1 <- x$estimate
    temp1$mpv <- format(temp1$mpv, digits=digits)
    temp1$std <- format(temp1$std, digits=digits)

    # the spaces help separate the two parts of the printout
    temp2 <- cbind(test= paste("    ", rownames(x$test)), 
                   data.frame(x$test), stringsAsFactors=FALSE)
    row.names(temp2) <- NULL
    temp2$Pr <- format.pval(pchisq(temp2$chisq, temp2$df, lower.tail=FALSE),
                            eps=eps)
    temp2$chisq <- format(temp2$chisq, digits= dig.tst)
    temp2$df <- format(temp2$df)
    if (!is.null(temp2$ss)) temp2$ss <- format(temp2$ss, digits=digits)
    
    if (nrow(temp1) > nrow(temp2)) {
        dummy <- temp2[1,]
        dummy[1,] <- ""
        temp2 <- rbind(temp2, dummy[rep(1, nrow(temp1)-nrow(temp2)),])
        }
    if (nrow(temp2) > nrow(temp1)) {
        # get rid of any factors before padding
        for (i in which(sapply(temp1, is.factor))) 
            temp1[[i]] <- as.character(temp1[[i]])
        
        dummy <- temp1[1,]
        dummy[1,] <- ""
        temp1 <- rbind(temp1, dummy[rep(1, nrow(temp2)- nrow(temp1)),])
        }
    print(cbind(temp1, temp2), row.names=FALSE)
    invisible(x)
}
@ 

