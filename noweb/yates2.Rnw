Now for the primary function.
The user may have a list of tests, or a single term.
The first part of the function does the usual of grabbing arguments
and then checking them.
The fit object has to have the standard stuff: terms, assign, xlevels
and contrasts. 
Attributes of the terms are used often enough that we copy them
to \code{Tatt} to save typing.
We will almost certainly need the model frame and/or model matrix as
well.

In the discussion below I use x1 to refer to the covariates/terms that are
the target, e.g. \code{test='Mask'} to get the mean population values for
each level of the Mask variable in the solder data set, and x2 to refer to
all the other terms in the model, the ones that we average over.  
These are also referred to as U and V in the vignette.

<<yates>>=
yates <- function(fit, test, population=c("data", "none", "factorial", "sas"),
                  type="linear", method=c("direct", "sgtt"), 
                  ss, ...) {
    if (missing(fit)) stop("a fit argument is required")
    Terms <- try(terms(fit), silent=TRUE)
    if (inherits(Terms, "try-error"))
        stop("the fit does not have a terms structure")
    else Terms <- delete.response(Terms)   # y is not needed
    Tatt <- attributes(Terms)
    xassign <- fit$assign
    nvar <- length(xassign)
    nterm <- length(Tatt$term.names)
    termname <- rownames(Tatt$factors)

    # a flaw in delete.response: it doesn't subset dataClasses
    temp<- Tatt$dataClasses[row.names(Tatt$factors)]
    iscat <- sapply(temp, function(x) x %in% c("character", "factor"))
    
    if (missing(method)) method <- "direct"
    method <- match.arg(casefold(method), c("direct", "sgtt")) #allow SGTT
    if (method=="sgtt" && missing(population)) population <- "sas"

    if (is.character(population)) {
        population <- match.arg(tolower(population[1]),
                                c("data", "none", "factorial", "sas",
                                  "empirical", "yates"))
        if (population=="empirical") population <- "data"
        if (population=="yates") population <- "factorial"
    }
    else {
        if (!inherits(population, "data.frame"))
            stop("the population argument must be a data frame or character")
        pdata <- population
        population <- "user"
        }
 
    if (method=="sgtt" && (population !=SAS || type != "linear"))
        stop("sgtt method only applies if population = SAS and type = linear")

    beta <-  coef(fit)
    nabeta <- is.na(beta)  # undetermined coefficients
    vmat <-  vcov(fit)
    
    # grab the dispersion
    if (missing(ss)) do.ss <- FALSE
    else do.ss <- ss
    if (class(fit)[1] =="lm") {
        if (missing(ss)) do.ss <- TRUE
        sigma <- summary(fit)$sigma
        }
    else if(class(fit)[1]=="glm") {
        sigma <- summary(fit)$dispersion
#        if (is.null(sigma)) sigma <- 1
        }
    else sigma <- NULL
    
    # process the test argument and check its legality
    <<yates-tests>>    
 
    # set up for checking estimability, if necessary
    <<yates-estim-setup
    
    # we will need the original model frame
    mframe <- fit$model
    if (is.null(mframe)) mframe <- model.frame(fit)
  
    # define the functions that actually do the work
    if (population=="none") {
        <<yates-nopop>>
    }
    else if (type=="linear") {
        <<yates-linear>>
    }
    else {
        stop("nonlinear portion yet to be writen")
        <<yates-nonlinear>>
    }
 
    # process the tests
    #  if the argument is a list of tests, the dummy function simply iterates
    #  over the list, or sublists of list elements, etc.
    dummy <- function(x) {
        if (inherits(x, "cmatrix")) dotest(x, method, population)
        else lapply(x, dummy)
    }
    result <- dummy(test)
    class(result) <- "yates"
    result
}
@

The first task of setting things up is farmed out to the \code{cmatrix}
routine.  
The original thought for yates was that the test argument would be a
list of tests, and you would bundle all the work for a model together into
one amalgamated call.  
As testing of the routine has proceeded this looks less and less like a
needed feature, but the code remains, in which case yates will produce
a list (which print.yates can't currently handle). 
To make it easier for users, we set up a local environment so that they
can use \code{cm(test, ...)} within the yates call, 
as a shorthand for \code{cmatrix(fit, test, ...)}

<<yates-test>>=
ff <- parent.frame()
tempenv <- new.env(parent=ff)
assign("cm", function(...) cmatrix(fit, ...), env=tempenv)
test <- eval(substitute(test), tempenv)
if (is.character(test) || inherits(test, "formula"))
    test <- cmatrix(fit, test)
@ 

Now check that the resulting test argument is legal.
<<cmatrix-test>>=
# each element of test should have class "cmatrix".  It can be
#  a singleton, a list, or a nested list of such elements
legal <- function(x) {
    if (inherits(x, "cmatrix")) TRUE
    else if (is.list(x)) all(sapply(x, legal))
    else FALSE
}
if (!legal(test))
    stop("the test argument should contain elements of class cmatrix")
@ 

Models with factor variables may often lead to population predictions that
involve non-estimable functions, particularly if there are interactions
or the user specifies a factorial population.  
If there are any missing coefficients we have to do formal checking for
this: any given row of the new $X$ matrix, for prediction, must be in the
row space of the original $X$ matrix. 
If this is true then a regression of a new row on the old $X$ will have 
residuals of zero.
It is not possible to derive this from the pattern of NA coefficients alone.
Set up a function that returns a true/false vector of whether each row of
a matrix is estimable.  This test isn't relevant if population=none.

<<yates-estim-setup>>=
Xold <- model.matrix(fit)
if (!any(is.na(beta)) || population == "none") 
    estimcheck <- function(x) rep(TRUE, nrow(x))  # all predictions estimable
else {
    X.qr <- qr(t(Xold))   # QR decomposition of the row space
    estimcheck <- function(x, eps= sqrt(.Machine$double.eps)) {
        temp <- qr.resid(X.qr, t(x))
        apply(abs(temp), 1, function(x) all(x < eps))
    }
@ 

When the prediction target is $X\beta$ there is a four step
process: build the reference population, create the list of X matrices
(one prediction matrix for each for x1 value), 
column means of each X form each row of the
contrast matrix Cmat, and then use Cmat to get the mpv values and
tests of the mpv values.

<<yates-linear>>=
dotest <- function(contr, method, population, type) {
    if (is.na(match(contr$termname, colnames(Tatt$factors))))
        stop("term '", contr$termname, "' not found in the model")
    
    <<yates-build-pop>>
    <<yates-xmat>>
    Cmat <- t(sapply(xmatlist, colMeans))
    
    # Get the MPV estimates
    etemp <- estfun(Cmat, beta, vmat)
    estimate <- cbind(x1data, mpv=etemp$estimate,
                      std = sqrt(diag(etemp$var)))
 
    # Now do the tests, one by one
    if (method=="sgtt") {
        if (is.list(contr$cmat))
            stop("sgtt method can only be used for global tests")
        <<yates-sgtt>>
    }
    else {
        if (is.list(contr$cmat)) 
            test <- t(sapply(contr$cmat, function(x)
                testfun(x %*% Cmat, beta, vmat, sigma^2)))
        else {
            test <- testfun(contr$cmat %*% Cmat, beta, vmat, sigma^2)
            test <- matrix(test, nrow=1, 
                           dimnames=list("global", names(test)))
        }
    }
    #list(estimate=estimate, test=test, mvar=etemp$var, 
    #     xmatlist=xmatlist)   # temporary debug line
    list(estimate=estimate, test=test, mvar=etemp$var)
}
@ 

Build the population data set.  This has two slightly different paths,
creation of a raw data set or of a model frame.
When population=data we create a model frame since that is what is readily
available, either already present as the \code{model} argument of the 
fit object, or via a call to model.frame(fit).  It could actually be
quite hard to recreate the raw data, for a spline term for instance.
For population=user we will have raw data, obviously.  The task in that
case is to verify that the data has all the needed variables.
For population = factorial we build our own raw data set out of 
fit$xlevels.

The problem with all this is names.  Suppose the original model was
\code{coxph(Surv(time, status) ~ ns(age,4) + factor(ph.ecog), lung)}.
In the data set the variable name is ph.ecog, in the model frame,
the xlevels list, and terms structure it is factor(ph.ecog). 
The data frame has individual columns for the four variables, the model frame
is a list with 3 elements, one of which is named ``ns(age, 4)'': notice the
extra space before the 4 compared to what was typed.

The all.vars function translates back for the vnames vector, but the logic
is imperfect for a model with \code{ns(age, df=zed)} where 'zed' was some
global variable.  The code below will expect to find zed in the the
user's data frame.  Such a case may never arise (we hope).

<<yates-build-pop>>=
vnames <- lapply(Tatt$variables, all.vars)[-1]  # first element was "list"
x1indx <- (Tatt$factors[,contr$termname] >0)      # which variables(s) in x1
x2indx <- !x1indx
if (population=="data") pdata <- mframe  #easy case
else if (population=="factorial") {
    if (any(!iscat[x2indx]))
        stop("population=factorial only applies if all the adjusting terms are categorical")
    x2name <- names(x2indx)[x2indx]
    pdata <- do.call("expand.grid", fit$xlevels[x2name])
} else if (population=="user") {
    hit <- sapply(vnames, function(x) all(x %in% names(pdata)))
    # any right-hand side which is found, leave it alone, not found=error
    if (any(!hit[x2index])) {
        i <- (which(x2index))[!hit[x2indx]]
        stop("terms with variables not found in data: ", termname[i])
    }
} else if (population=="sas") {
    if (all(iscat(x2indx))) {
        # we can reprise the factorial case
        x2name <- names(x2indx)[x2indx]
        pdata <- do.call("expand.grid", fit$xlevels[x2name])
    }
    else if (!any(iscat(x2indx))) {
        # we can reprise the data case
        pdata <- fit$model
        if (is.null(pdata)) pdata <- model.frame(fit)
    }
    else { # drat, we need both
        # grab pdata, then pull it apart
        pdata <- fit$model
        if (is.null(pdata)) pdata <- model.frame(fit)
        n1 <- nrow(pdata)  
        x2name <- names(x2indx)[x2indx]
        n2 <- sapply(fit$xlevels[x2name], length)
        gcd <- function(a, b) {
            cat("ab=", a, b, "\n")
            x <- as.integer(max(a,b))
            y <- as.integer(min(a,b))
            if (y==0) x
            else abs(gcd(y, x- y*floor(x/y)))
         }
        lcm <- function(a, b) round(a*b)/gcd(a, b)
        n <- lcm(n1, prod(n2))
        pdata <- pdata[rep(1:n1, length=n)]
        for (i in seq(along=x2name)) {
            j <- rep(rep(n2[i], each=i), length=n)
            pdata[x2name[i]] <- (fit$xlevels[x2name[i]])[j]
        }
    }
}

@ 

The next section builds a set of X matrices, one for each level of the
x1 combination.  
There are two cases. The first is when pdata is a data frame, the second
when it is a model frame.
The levels component of the contrast will contain the x1 values; for
the data frame case we simply paste them in one by one and call model.frame
on each result.  For the model.frame case we first have to transform the
x1 values to their final form, then paste them on.
<<yates-xmat>>=
if (is.null(contr$levels)) stop("levels is missing for this contrast")
x1data <- as.data.frame(contr$levels)  # in case it is a list
xmatlist <- vector("list", nrow(x1data))
if (is.null(attr(pdata, "terms"))) {
    # data frame case, variable order does not matter
    pdata <- pdata[, !(names(pdata) %in% names(x1data))]
    np <- nrow(pdata)
    for (i in 1:nrow(x1data)) {
        j <- rep(i, np)
        tdata <- cbind(pdata, x1data[j,,drop=FALSE]) # new data set
        xmatlist[[i]] <- model.matrix(Terms, tdata, xlev=fit$xlevels,
                                      contrast.arg= fit$contrasts)
    }
} else {
    # create a subset of the terms structure, for x1 only
    x1term <- Terms[which(x1indx)]
    x1name <- names(x1indx)[x1indx]
    attr(x1term, "dataClasses") <- Tatt$dataClasses[x1name] # R bug
    x1frame <- model.frame(x1term, x1data, xlev=fit$xlevels[x1name])
    for (i in 1:nrow(x1data)) {
        j <- rep(i, nrow(pdata))
        tdata <- pdata
        tdata[,names(x1frame)] <- x1frame[j,]
        xmatlist[[i]] <- model.matrix(Terms, tdata, xlev=fit$xlevels,
                                      contrast.arg= fit$contrasts)
    }
}
@ 

<<yates-build-none>>=
#  The population="none" case. contr will be a cmatrix object
index <- match(contr$termname, Tatt$term.labels)
whichcol <- which(xassign %in% index)  #columns to fill in
ncol <- length(whichcol)
if (is.null(contr$levels)) {
    # population = none is the one case where we allow values for 
    #  x1 to be unspecified.  
    apv <- matrix(0., nrow=ncol, ncol=nvar)
    apv[,whichcol] <- diag(ncol)
}
else {
    apv <- matrix(0., nrow=nrow(contr$levels), ncol=nvar)
}    
    
ncoef <- length(xassign)
whichcol <- which(xassign %in% index)  #columns to fill in
clevel <- contr$levels
nullcontr <- sapply(clevel, is.null)
if (all(nullcontr)) {
    Xmat <- matrix(0., nrow=length(whichcol), ncol=ncoef)
    Xmat[,whichcol] <- diag(length(whichcol))
}
else if (any(nullcontr))                            
    stop("can't handle this type of mixed term, yet")
else {
    # Get the inner part of each name, e.g, ns(age, df=3) turns into "age".
    #  The line below is killing a fly with a triphammer, but we only run
    #  it once.  
    pname <- names(clevel)
    for (i in 1:length(pname)) pname[i] <- all.vars(parse(text=pname[i]))[1]
    
    if (!is.data.frame(clevel)) clevel <- do.call("expand.grid", clevel)
    Xmat <- matrix(0., nrow=nrow(clevel), ncol=ncoef)
    for (i in 1:ncol(clevel)) {
        cname <- names(clevel)[i]
        ccol <- which(xassign== index[i])
        if (contr$iscat[i]) {
            if (length(ccol) < length(fit$xlevels[[cname]])) 
                temp <- get(fit$contrasts[[cname]])(length(ccol))
            else temp <- get(fit$contrasts[[cname]])(length(ccol),
                                                     contrasts=FALSE)
            Xmat[,ccol] <- temp[match(clevel[[i]], fit$xlevels[[cname]]),]
        }
        else { # continuous
            j <- match(cname, row.names(Tattr$factors))
            pcall <- Tattr$predictCall[[j+1]] #skip the "list" element
            if (is.call(pcall)) {
                temp <- list(clevel[[i]])
                names(temp) <- pname[i]
                Xmat[,ccol] <- eval(pcall, temp)
            }
            else if (is.name(temp)) {
                if (length(ccol) !=1) stop("logic error")
                Xmat[,ccol] <- clevel[[i]]
            }
            else stop("logic error 2")  #should be impossible
        }
    }
}
@ 

Now go through the contrast matrices 1 by 1 and evaluate them.
<<yates-build-none>>=
if (is.list(contr$cmatrix)) 
    r1 <- sapply(contr$cmatrix, function(z) cfun(z, beta, vmat, sigma^2))
else r1 <- cfun(contr$cmatrix, beta, vmat, sigma^2)
@ 

<<yates-sgtt>>=
@ 
<<yates-nonlinear>>=
@ 

Population estimates are more work since they involve manipulation
of the model frame.  We essentially break it into two parts: the term
that was asked for, and all the others.
From all the others build a population model frame: that has 4 cases to
consider for the 4 population type.
Model frames are perilous objects: you can't just cut and paste one, as it
has to exactly match the formula that generated it in certain ways.  
It is far better to start with data.  
But we don't have the data.  
One can often recreate the data from the model frame, but not always:
if the user has \code{ns(age, 4)} the mf contains the result of the
computation and there is no simple inverse function.  
We handle the inverse for just a few: \code{I()} and \code{factor()},
as that just entails a change of the name.  
For the variable of interest things are ok: for that we have the levels.

<<yates-build-pop-old>>=
# x1 = my shorthand for the term of interest, x2 = the rest
tfac   <- Tatt$factors[, cm$termname]
x1name <- names(tfac)[tfac> 0]  # names for the second data set
x2name <- names(tfac)[tfac==0]  # names for the second data set

if (is.null(cm$level) || any(is.na(match(x1name, names(cm$level)))))
    stop("levels are needed for a population contrast")

data1 <- cm$level
# for the left part, we have data, not functions, so just remove any
#  function names.  Assume that the very first arg is the variable name
inner <- function(x) {
    for (i in 1:length(x)) 
        x[i] <- all.vars(parse(text=x[i]))[1]
    x
}
names(data1) <- inner(names(data1))

fixname <- function(x) { #remove calls to I() and factor()
    x <- sub("(factor\\()([^\\)]*)(\\))", "\\2", x)
    x <- sub("(I\\()([^\\)]*)(\\))", "\\2", x)
    x
}

if (population != "user") { # construct data2
    mf <- model.frame(fit)
    data2 <- mf[x2name]
    names(data2) <- fixname(names(data2))
    complex <- fgrepl('(', names(data2)) 
    if (any(complex)) {  # terms that are functions
        # fill in a dummy value
        names(data2) <- inner(names(data2))
        for (i in complex) data2[[i]] <- 1:nrow(data2)
    }
    if (population == "factorial") {
        if (!all(iscat[tfac==0])) 
            stop("all population variables must be categorical")
        data2 <- do.call("expand.grid", lapply(data2, unique))
    }        
    else if (population == "SAS" && method != "SGTT") {
        # expand the data set, but who would want to do this?
        stop("cannot yet have population=SAS and not use the SGTT")
    }
}

# Now create the estimate matrix one row at at time, and create the
#  APV (average predicted value) estimates and their std
emat <- matrix(0., nrow(data1), length(fit$coef))
apv  <- matrix(0., nrow(data1), ncol=2)    
for (i in 1:nrow(data1)) {
    tdata <- cbind(data1[i,], data2)
    newmf <- model.frame(Terms, tdata, xlev= fit$xlevels)
    if (any(complex)) { # fix it
        stop("not yet done")
    }
    newx  <- model.matrix(Terms, tdata, xlev=fit$xlevels,
                          contrasts.arg = fit$contrasts)
    emat[i,] <- colMeans(newx)
}    
@ 

<<yates-build-sgtt>>=
@ 
<<yates-build-apv1>>=
@


The print routine places the population predicted values (PPV) alongside the
tests on those values.  Defaults are copied from printCoefmat.

<<yates>>=
print.yates <- function(x, digits = max(3, getOption("digits") -2),
                        dig.tst = max(1, min(5, digits-1)),
                        eps=1e-8, ...) {
    temp1 <- x$estimate
    temp1$mpv <- format(temp1$mpv, digits=digits)
    temp1$std <- format(temp1$std, digits=digits)

    # the spaces help separate the two parts of the printout
    temp2 <- cbind(test= paste("    ", rownames(x$test)), 
                   data.frame(x$test), stringsAsFactors=FALSE)
    row.names(temp2) <- NULL
    temp2$Pr <- format.pval(pchisq(temp2$chisq, temp2$df, lower.tail=FALSE),
                            eps=eps)
    temp2$chisq <- format(temp2$chisq, digits= dig.tst)
    temp2$df <- format(temp2$df)
    if (!is.null(temp2$ss)) temp2$ss <- format(temp2$ss, digits=digits)
    
    if (nrow(temp1) > nrow(temp2)) {
        dummy <- temp2[1,]
        dummy[1,] <- ""
        temp2 <- rbind(temp2, dummy[rep(1, nrow(temp1)-nrow(temp2)),])
        }
    if (nrow(temp2) > nrow(temp1)) {
        # get rid of any factors before padding
        for (i in which(sapply(temp1, is.factor))) 
            temp1[[i]] <- as.character(temp1[[i]])
        
        dummy <- temp1[1,]
        dummy[1,] <- ""
        temp1 <- rbind(temp1, dummy[rep(1, nrow(temp2)- nrow(temp1)),])
        }
    print(cbind(temp1, temp2), row.names=FALSE)
    invisible(x)
}
@ 

  
