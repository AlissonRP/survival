\subsubsection{Printing and plotting}
The [[survfitms]] class differs from a [[survfit]], but many of the
same methods nearly apply.
<<survfitms>>=
# Methods for survfitms objects
<<survfitms-summary>>
<<survfitms-subscript>>
@ 

The subscript method is a near copy of that for survfit
objects, but with a slightly different set of components. 
The object could have strata and will almost always have multiple
columns.  If there is only one subscript it is preferentially
associated with the strata, if there is no strata argument [[i]]
will associate with the columns.
If there are two subscripts the first goes with the strata.
The little [[nmatch]] function allow the user to use either names
or integer indices.
The drop argument is important when strata get subscripted such that
only one row remains and there
are multiple columns: in that case we do \emph{not} want to 
lose the matrix nature of the result as it will lead to an invalid
object.  Otherwise we can drop columns freely
<<survfitms-subscript>>=
"[.survfitms" <- function(x, ..., drop=TRUE) {
    nmatch <- function(indx, target) { 
        # This function lets R worry about character, negative, or logical subscripts
        #  It always returns a set of positive integer indices
        temp <- 1:length(target)
        names(temp) <- target
        temp[indx]
    }
        
    if (missing(..1)) i<- NULL  else i <- sort(..1)
    if (missing(..2)) j<- NULL  else j <- ..2
    if (is.null(x$strata)) {
        if (is.matrix(x$prev)) {
            # No strata, but a matrix of prevalence values
            #  In this case, allow them to use a single i subscript as well
            if (is.null(j) && !is.null(i)) j <- i
            indx <- nmatch(j, x$states)
            if (any(is.na(indx)))
                stop("unmatched subscript", j[is.na(indx)])
            else j <- as.vector(indx)
            x$states <- x$states[j]
            
            if (nrow(x$prev)==1 && length(j) > 1) drop<- FALSE
            x$prev <- x$prev[,j,drop=drop]
            x$cumhaz <- x$cumhaz[j,j,, drop=drop]
            x$prev0  <- x$prev0[j]
            if (!is.null(x$std.err)) x$std.err <- x$std.err[,j,drop=drop]
            if (!is.null(x$upper)) x$upper <- x$upper[,j,drop=drop]
            if (!is.null(x$lower)) x$lower <- x$lower[,j,drop=drop]
            }
        else warning("Survfit object has only a single survival curve")
        }
    else {
        if (is.null(i)) {
            keep <- seq(along.with=x$time) # rows to keep
            indx <- seq(along=x$strata)
        }
        else {
            indx <- nmatch(i, names(x$strata)) #strata to keep
            if (any(is.na(indx))) 
                stop(paste("strata", 
                               paste(i[is.na(indx)], collapse=' '),
                           'not matched'))

            # Now, i may not be in order: a user has curve[3:2] to reorder a plot
            # Hence the list/unlist construct which will reorder the data in the curves
            temp <- rep(1:length(x$strata), x$strata)
            keep <- unlist(lapply(i, function(x) which(temp==x)))

            if (length(i) <=1 && drop) x$strata <- NULL
            else               x$strata  <- x$strata[indx]

            x$n       <- x$n[indx]
            x$time    <- x$time[keep]
            x$n.risk  <- x$n.risk[keep]
            x$n.censor<- x$n.censor[keep]
            }
        if (is.matrix(x$prev)) { 
            # If [i,] selected only 1 row, don't collapse the columns
            if (length(keep) <2 && (is.null(j) || length(j) >1)) drop <- FALSE
            if (is.null(j)) {  #only subscript rows (strata)
                x$prev <- x$prev[keep,,drop=drop]
                x$cumhaz <- x$cumhaz[,,keep, drop=drop]
                x$prev0 <- x$prev0[indx,,drop=drop]
                x$n.event <- x$n.event[keep,,drop=drop]
                if (!is.null(x$std.err)) 
                        x$std.err <- x$std.err[keep,,drop=drop]
                if (!is.null(x$upper)) x$upper <-x$upper[keep,,drop=drop]
                if (!is.null(x$lower)) x$lower <-x$lower[keep,,drop=drop]
                }
            else { #subscript both rows (strata) and columns (states)
                temp <- nmatch(j, x$states)
                if (any(is.na(temp))) 
                    stop("unmatched subscript", j[temp])
                else j <- as.vector(temp)
                x$states <- x$states[j]
                x$prev <- x$prev[keep,j, drop=drop]
                x$prev0 <- x$prev0[indx, j, drop=drop]
                x$n.event <- x$n.event[keep, j, drop=drop]
                x$cumhaz <- x$cumhaz[j,j,keep, drop=drop]
                if (!is.null(x$std.err)) x$std.err <- x$std.err[keep,j,drop=drop]
                if (!is.null(x$upper)) x$upper <- x$upper[keep,j, drop=drop]
                if (!is.null(x$lower)) x$lower <- x$lower[keep,j, drop=drop]
                }
            }
        else {
            x$prev <- x$prev[keep]
            x$prev0 <- x$prev0[indx]
            x$cumhaz <- x$cumhaz[keep]
            x$n.event <- x$n.event[keep]
            if (!is.null(x$std.err)) x$std.err <- x$std.err[keep]
            if (!is.null(x$upper)) x$upper <- x$upper[keep]
            if (!is.null(x$lower)) x$lower <- x$lower[keep]
            }
        }
    x
    }

@ 

The summary.survfit function has  
been rewritten multiple times due to the complexity of
operating with the ``times'' argument.
The version below has opted for simplicity by doing that portion 
separately per curve.
<<survfit-summary>>=
summary.survfit <- function(object, times, censored=FALSE, 
			    scale=1, extend=FALSE, 
                            rmean=getOption('survfit.rmean'),
                            ...) {
    if (!inherits(object, 'survfit'))
	    stop("summary.survfit can only be used for survfit objects")

    # The print.rmean option is depreciated, it is still listened
    #   to in print.survfit, but ignored here
    if (is.null(rmean)) rmean <- "none"

    temp <- survmean(object, scale=scale, rmean)  
    table <- temp$matrix  #for inclusion in the output list
    rmean.endtime <- temp$end.time

    # The fit$surv object is sometimes a vector and sometimes a
    #  matrix. 
    nsurv <- if (is.matrix(fit$surv)) nrow(fit$surv) else length(fit$surv)
    if (is.null(fit$strata)) {
	nstrat <- 1
	stemp <- rep(1L, nsurv)
        strata.names <- ""
	}
    else   {
	nstrat <- length(fit$strata)
	stemp <- rep(1:nstrat, fit$strata)
        strata.names <- names(fit$strata)
    }

    # The simple case is when "times" is not present
    if (missing(times)) {
        if (censored) {
            result <- object  # no more to do
            result$time <- result$time/scale
            result$table <- table
            if (!is.null(result$strata))
                result$strata <- factor(stemp, labels=strata.names)
            }
       else {
           if (is.matrix(object$n.event)) 
               indx <- which(rowSums(object$n.event) > 0)
           else indx <- which(object$n.event > 0)
           
           result <- list(n= object$n, time= object$time[indx]/scale, 
                          table= table)
           for (j in c("n.risk", "n.event", "n.censor", "n.enter", "prev",
                    "surv", "std.err", "cumhaz", "lower", "upper")) {
               zed <- object[[j]]
               if (!is.null(zed)) {
                   if (is.matrix(zed)) result[[j]] <- zed[indx,,drop=FALSE]
                   else result[[j]] <- zed[indx]
               }
           }
           if (!is.null(temp$strata))
               temp$strata <- factor(stemp[indx], levels=1:nstrat,
                                     labels=strata.names)
       }
    }
    else { # there was a times argument
        <<survfitms-times>>
        result <- list(n=object$n, time=times/scale, 
                     n.risk=n.risk, n.event=n.event,
                     conf.int=fit$conf.int, type=fit$type, table=table)
        if (!is.null(n.censor)) temp$n.censor <- n.censor
        if (!is.null(n.enter))  temp$n.enter <- n.enter
        if (!is.null(fit$start.time)) temp$start.time <- fit$start.time
            
        # why the rbind?  The user may have specified a time point before
        #  the first event, and indx1=1 indicates that case
        if (is.matrix(fit$surv)) {
            temp$surv <- rbind(1, fit$surv)[indx1,,drop=FALSE]
            if (!is.null(fit$std.err))
                temp$std.err <- rbind(0, fit$std.err)[indx1,,drop=FALSE]
            if (!is.null(fit$lower)) {
                temp$lower <- rbind(1, fit$lower)[indx1,,drop=FALSE]
                temp$upper <- rbind(1, fit$upper)[indx1,,drop=FALSE]
             }
            if (!is.null(fit$cumhaz))
                temp$cumhaz <- rbind(0, fit$cumhaz)[indx1,,drop=FALSE]
        }
        else {
            temp$surv <- c(1, fit$surv)[indx1]
            if (!is.null(fit$std.err)) temp$std.err <- c(0,fit$std.err)[indx1]
            if (!is.null(fit$lower)) {
                temp$lower <- c(1, fit$lower)[indx1]
                temp$upper <- c(1, fit$upper)[indx1]
            }
            if (!is.null(fit$cumhaz)) temp$cumhaz <- c(0, fit$cumhaz)[indx1]
        }
        if (!is.null(fit$strata)) {
            scount <- unlist(lapply(newtimes, length))
            temp$strata <- factor(rep(1:nstrat, scount), levels=1:nstrat,
                                  labels=strata.names)
        }
    
        if (length(rmean.endtime)>0  && !is.na(rmean.endtime)) 
            temp$rmean.endtime <- rmean.endtime

        temp$call <- fit$call
        if (!is.null(fit$na.action)) temp$na.action <- fit$na.action
  
    }
    if (!is.null(temp$std.err))
        temp$std.err <- temp$std.err*temp$surv  #std error of the survival curve
    class(temp) <- 'summary.survfit'
    temp
}
@ 

The case with a times argument is actual work, since may 
invovle ``in between'' points in the curves.
Let's say that we have lines in the data for times 1,2, 5, and 6, and 8 
and a user has chosen [[times=c(3,5, 9)]].
The printout will have 
\begin{itemize}
  \item the number at risk at times 3,5, and 9.  Think of the number at
    risk as a right continuous step function which we will interpolate.
    After time 8 the number at risk drops by the number of events or censors
    at that time point.  This is only necessary if extend is true.
  \item the number of events and censorings are the number that occured in
    each interval, which is again interpolation on a right continuous function.
  \item the survival estimate interpolates a left continuous function. 
  \item the number of events may be a matrix, do that calculation per column
\end{itemize}
A principle tool is the findInterval function, treating each curve as though
it were a separate subject.
In R version 3.3 this gained a ``left.open'' argument, for the 
moment we work around that.

<<survfitms-times>>=
interval2 <- function(x, vec, rightmost.closed=FALSE, all.inside=FALSE,
                      left.open=FALSE) {
    if (left.open) {
        n <- length(vec)
        n - findInterval(-x, -vec[n:1], rightmost.closed, all.inside)
    }
    else findInterval(x, vec, rightmost.closed, all.inside)
}   

indxfun <- function(x, times) {
    # This function is called once per curve
    ntime <- lenth(times)
    maxindx <- length(x$time)
    index1 <- interval2(times, x$time, left.open=TRUE)
    index2 <- interval2(times, x$time, left.open=FALSE)
    # A time point is strictly to the left of the survival data
    #  if index2 =0, strictly to the right if index1 = ntime
    
@
	
else {
    if (nstrat ==1) {
        id.curve <- rep(1, length(n.risk))
        id.times <- rep(1, length(times))
        time2 <- times
        first <- 1
        }
    else {
        id.curve <- rep(1:nstrat, object$strata)
        id.times <- rep(1:nstrat, each=length(times))
        time2 <- rep(times, nstrat)
        first <- seq(1, length=nstrat, by=length(times))
        }
    indx1 <- neardate(id.times, id.curve, time2, object$time, 
                      best= "prior", nomatch =0)
    indx2 <- neardate(id.times, id.curve, time2, object$time, 
                      best ="after", nomatch =0)
    
    # For a time that is before the first data point in a curve
    #  indx1 will be 0, for one that is after the last indx2 will be 0
    ccens <- cumsum(object$n.censor)
    n.censor <- diff(c(0, ccens)[indx+1])
    n.censor[first] <- 
    n.censor <- c(0, cumsum(object$n.censor)[indx1+1]) #cumulative censored
    n.censor <- ifelse(first, ncensor, diff(c(0, n.censor)))
    
    
    if (!extend) indx1[indx2==0] <- 0  # don't use times after the end
        
    #   adding the results for that curve onto a list, so the
    #   number of events will be n.enter[[1]], n.enter[[2]], etc.
    # For the survival, stderr, and confidence limits it suffices
    #   to create a single list 'indx1' containing a subscripting vector
    indx1 <- n.risk <- n.event <- newtimes <- vector('list', nstrat)
    n.enter <- vector('list', nstrat)
    n.censor<- vector('list', nstrat)
    n <- length(stemp)
    for (i in 1:nstrat) {
        who <- (1:n)[stemp==i]  # the rows of the object for this strata
        stime <- fit$time[who]

        # First, toss any printing times that are outside our range
        if (is.null(fit$start.time)) mintime <- min(stime, 0)
        else                         mintime <- fit$start.time
        ptimes <- times[times >= mintime]

        if (!extend) {
            maxtime <- max(stime)
            ptimes <- ptimes[ptimes <= maxtime]
    	}

        newtimes[[i]] <- ptimes

        # If we tack a -1 onto the front of the vector of survival
        #  times, then indx1 is the subscript for that vector
        #  corresponding to the list of "ptimes".  If the input
        #  data had stime=c(10,20) and ptimes was c(5,10,15,20),
        #  the result would be 1,2,2,3.
        # For n.risk we want a slightly different index: 2,2,3,3.
        #  "In between" times point to the next higher index for n.risk,
        #  but the next lower one for survival. (Survival drops at time t,
        #  the n.risk immediately afterwords at time t+0: you were at
        #  risk just before you die, but not a moment after). The
        #  extra point needs to be added at the end.
        #
        ntime <- length(stime)  #number of points
        temp1 <- approx(c(mintime-1, stime), 0:ntime, xout=ptimes,
    		    method='constant', f=0, rule=2)$y
        indx1[[i]] <- ifelse(temp1==0, 1, 1+ who[pmax(1,temp1)])
        # Why not just "who[temp1]" instead of who[pmax(1,temp1)] in the
        #  line just above?  When temp1 has zeros, the first expression
        #  gives a vector that is shorter than temp1, and the ifelse
        #  doesn't work right due to mismatched lengths.  
        n.event[[i]] <- cfun(temp1+1, fit$n.event[who])

        if (!is.null(fit$n.censor)) {
    	    n.censor[[i]] <- cfun(temp1+1, fit$n.censor[who])
    	    j <- who[ntime]  #last time point in the data
    	    last.n <- fit$n.risk[j] - (fit$n.event[j]+ fit$n.censor[j])
    	    }
        else {
    	# this is for the older survfit objects, which don't contain
    	#  n.censor.  In this case, we don't know how many of the
    	#  people at the last time are censored then & how many go
    	#  on further.  Assume we lose them all.  Note normally
    	#  extend=FALSE, so this number isn't printed anyway.
    	last.n <- 0
    	}

        # Compute the number at risk.  If stime = 1,10, 20 and ptime=3,10,
        #   12, then temp1 = 2,2,3: the nrisk looking ahead
        # approx() doesn't work if stime is of length 1
        if (ntime ==1) temp1 <- rep(1, length(ptimes))
        else temp1 <- approx(stime, 1:ntime, xout=ptimes,
    		    method='constant', f=1, rule=2)$y
        n.risk[[i]] <- ifelse(ptimes>max(stime), last.n,
    			  fit$n.risk[who[temp1]])
     }
	
    times  <- unlist(newtimes)
    n.risk <-  unlist(n.risk)
    n.event <- unlist(n.event)
    n.enter <- unlist(n.enter)   #may be NULL
    n.censor<- unlist(n.censor)  #may be NULL
    
    indx1 <- unlist(indx1)
}
@ 


Repeat the code for survfitms objects.  The only real differences are
the preservation of [[prev]] and [[cumhaz]] instead of [[surv]],
and that n.event may be a matrix.

<<survfitms-summary>>=
summary.survfitms <- function(object, times, censored=FALSE, 
			    scale=1, extend=FALSE, 
                            rmean=getOption('survfit.rmean'),
                            ...) {
    fit <- object
    if (!inherits(fit, 'survfitms'))
	    stop("summary.survfitms can only be used for survfitms objects")

    if (is.null(rmean)) rmean <- "none"
    if (!missing(times)) {
        if (!is.numeric(times)) stop ("times must be numeric")
        times <- sort(times)
    }

    # add some temps to make survmean work
    object$surv <- 1-object$prev
    if (is.matrix(object$surv)) 
        dimnames(object$surv) <- list(NULL, object$states)
    temp <- survmean(object, scale=scale, rmean)  
    table <- temp$matrix  #for inclusion in the output list
    rmean.endtime <- temp$end.time

    # The fit$prev object is usually a matrix but can be a vector
    #  We calculate row indices first, and then deal
    #  with the cases at the end.
    nprev <- if (is.matrix(fit$prev)) nrow(fit$prev) else length(fit$prev)
    if (is.null(fit$strata)) {
	nstrat <- 1
	stemp <- rep(1L, nprev)
        strata.names <- ""
	}
    else   {
	nstrat <- length(fit$strata)
	stemp <- rep(1:nstrat, fit$strata)
        strata.names <- names(fit$strata)
    }

    <<survsum-findrows>>

    # Create an output structure
    if (length(indx1)== length(fit$time) && all(indx1 == seq(along=fit$time))) {
        temp <- object  #no change
        temp$time <- temp$time/scale
        temp$table <- table
        if (!is.null(temp$strata)) 
            temp$strata <- factor(stemp, levels=1:nstrat, labels=strata.names)
    }
    else if (missing(times)) {
        temp <- object
        temp$time <- temp$time[indx1]/scale
        temp$table <- table
        for (j in c("n.risk", "n.event", "n.censor", "n.enter",
                    "prev", "std.err", "lower", "upper")) {
            zed <- temp[[j]]
            if (!is.null(zed)) {
                if (is.matrix(zed)) temp[[j]] <- zed[indx1,,drop=FALSE]
                else temp[[j]] <- zed[indx1]
            }
        }
        temp$cumhaz <- fit$cumhaz[,,indx1,drop=FALSE]
        if (!is.null(temp$strata))
            temp$strata <- factor(stemp[indx1], levels=1:nstrat,
                                  labels=strata.names)
    }
    else {
        temp <- list(n=object$n, time=times/scale, 
                     n.risk=n.risk, n.event=n.event,
                     conf.int=fit$conf.int, type=fit$type, table=table)
        if (!is.null(n.censor)) temp$n.censor <- n.censor
        if (!is.null(n.enter))  temp$n.enter <- n.enter
        if (!is.null(fit$start.time)) temp$start.time <- fit$start.time

        # why the rbind?  The user may have specified a time point before
        #  the first event, and indx1=1 indicates that case
        # the cumhaz array can't be done with a 1-liner
        if (is.matrix(fit$prev)) {
            temp$prev <- rbind(0, fit$prev)[indx1,,drop=FALSE]
            zz <- ifelse(indx1==1, NA, indx1-1)
            temp$cumhaz <- fit$cumhaz[,,zz, drop=FALSE]
            temp$cumhaz <- ifelse(is.na(temp$cumhaz), 0, temp$cumhaz)
            if (!is.null(fit$std.err)) 
                temp$std.err <- rbind(0, fit$std.err)[indx1,,drop=FALSE]
            if (!is.null(fit$lower)) {
                temp$lower <- rbind(0, fit$lower)[indx1,,drop=FALSE]
                temp$upper <- rbind(0, fit$upper)[indx1,,drop=FALSE]
            }
        }
        else {
            temp$prev <- c(0, fit$prev[indx1])
            temp$cumhaz <- c(0, fit$cumhaz[indx1])
            if (!is.null(fit$std.err)) temp$std.err <- c(0, fit$std.err)[indx1]
            if (!is.null(fit$lower)) {
                temp$lower <- c(0, fit$lower)[indx1]
                temp$upper <- c(0, fit$upper)[indx1]
            }
        }
        if (!is.null(fit$strata)) {
            scount <- unlist(lapply(newtimes, length))
            temp$strata <- factor(rep(1:nstrat, scount), levels=1:nstrat,
                                  labels=strata.names)
        }

        temp$call <- fit$call
        if (!is.null(fit$na.action)) temp$na.action <- fit$na.action
  
    }
        
    if (length(rmean.endtime)>0  && !is.na(rmean.endtime)) 
            temp$rmean.endtime <- rmean.endtime
    class(temp) <- "summary.survfitms"
    temp
}
@ 
