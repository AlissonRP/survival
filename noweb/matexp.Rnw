\section{Matrix exponential}
Multi-state survival curves start with a transitions matrix $T$,
of dimension from=nstate and to=nstate.
Say we are looking at a particular time point with the following
counts:
\begin{center}
  \begin{tabular}{cccc}
    &\multicolumn{3}{To} \\
    & A & B & C \\ \hline
  A & 91 & 5 & 4 \\
  B &   3 & 50 & 0 \\
  C &   0 & 21 & 50 
  \end{tabular}
\end{center}

The transition rates at this point in time are 
$\lamba_{AB} = 5/100$ = transitions from A to B,
$\lambda_{AC} = 4/100$, $\lambda_{BA} = 3/53$, etc.
$T$ is a matrix of these rates; every row sums to 1: everyone has to either
transition to somewhere else or stay put at any given time point.
There are two ways to update the vector $p$ of occupancy probabilities at
the time point, either the direct (Aalen-Johansen) method
\eqref{matexp1} or the exponential method \eqref{matexp2}.
\begin{eqnarray}
  p(s) &= p(s-) T(s) \label{matexp1} \\
  p(s) &= p(s-) exp(T(s)-I) \label{matexp2} \\
       &= p(s-) exp(A(s)) \nonumber
\end{eqnarray}

The first of these is dominant for the raw data, the second for survival curves
after a Cox model; the code allows for either estimate.
A matrix exponential is fairly easy, just use the matexp() function from
the Matrix package, but when computing a robust variance we need the derivative
of the function, and that is substantially harder.
The code takes a 3 pronged approach.
First, for a small number of states the matrix exponential can often be
written in closed form.
For instance, consider a 3 state competing risks problem, for which we have
\begin{eqnarray*}
  A &= \left( \begin{array}{ccc} -(a+b) & a & b \\ 0 & 0 & 0\\ 0 & 0 & 0 
  \end{array} \right) \\
exp(A) &= B \\
       &= \left( \begin{array}{ccc}
  e^{-(a+b)} & a (1- e^{-(a+b)})/(a+b) & b (1- e^{-(a+b)})/(a+b) \\
  0 & 1 & 0 \\ 0 & 0 & 1 \end{array} \right)
\end{eqnarray*}
The elementwise derivative with respect to $w_i$, the weight of the $i$th 
subject, will have elements of the form 
$$
\frac{\partial B_{jk}}{\partial a}\frac{\partial a}{\parial w_i} +
\frac{\partial B_{jk}}{\partial b}\frac{\partial b}{\parial w_i}
$$ 

A second strategy applies to matrices that are easily factored.
If $A= UDU'$ then $\exp(A) = U \exp(D) U'$ where $D$ is a diagonal
matrix of eigenvalues.  This holds whenever the diagonal elements of $D$
are unique.  Such a decomposition is particularly easy to create if
$A$ is upper triangular, which will be the case whenever there are no
loops in the state space. In this case the derivative is also fairly 
easy to create. 
The last approach is to use a Pade approximation.

For the first case we create a list object \code{dexp} that contains
the solution for selected small matrices.
(This may actually cover a substantial fraction of the practical problems.)
Each element has the dimension of the matrix, the location of
location of active elements (off diagonal and non-zero), 
a function to compute the matrix exponential and another to
compute the derivative. 
The result of the latter is an array with one slice for each active
element.

<<dexp>>=
dexp <- list(
    <<d2.3>>,
    <<d3.cr>>,
    <<d3.24>>,
    <<empty>> )
@ 
<<d2.3>>=
list(nstate =2, nonzero=3,
     mexp = function(tmat, time) {
         # 2 states 1 transition
         if (tmat[1,2] ==0)  # no events
             matrix(c(1,0,0,1), 2, 2)
         else {
             e1 <- exp(-time * tmat[1,2])
             matrix(c(e1, 0, 1-e1, 1), 2,2)
         }
     },
     deriv = function(tmat, time) {
         if (tmat[1,2] ==0) array(0, dim=c(3,3,1))
         else {
             d1 <- tmat[1,2]*exp(-time*tmat[1,2])
             array(c(d1, 0, 1-d1, 0), dim=c(2,2,1))
         }
     }
)
@ 

Competing risks for 3, 4, \ldots states.  Here is the analytic form
for 4 states, the others are similar.

\begin{eqnarray}
  A& = \left( \begin{array}{cccc}
    -(a+b+c) & a & b & c \\ 0& 1 & 0 & 0 \\0& 0 & 1 & 0 \\ 0 &0 &0 &1 \\
    \end{array} \right) \\
  exp(At) &= \left( \begin{array}{cccc}
    e^{-(a+b+c)t} & a(1- e^{-(a+b+c)t})/(a+b+c) &   
    b(1- e^{-(a+b+c)t})/(a+b+c)& c(1- e^{-(a+b+c)t})/(a+b+c) \\
    0 &1 &0 &0 \\ 0 &0 &1 &0 \\ 0 &0 &0 &1 \\
  \end{array} \right)
\end{eqnarray}

  
<<d.cr>>=
list(nstate =3, nonzero=c(4,7),
     mexp = function(tmat, time) {
         # 2 transitions, competing risks
         d1 <- tmat[1,2] + tmat[1,3]
         if (d1==0) diag(3)
         else {
             e1 <- exp(-time* d1)
             matrix(c(temp1, 0, 0, 
                      tmat[1,2]*(1-e1)/d1, 1, 0,
                      tmat[1,3]*(1-e1)/d1, 0, 1), 3, 3)
         }       
     }  
     deriv = function(tmat, time) {
         d1 <- tmat[1,2] + tmat[1,3]
         if (d1 ==0) array(0, dim=c(3,3,2))
         else {
             e1 <- exp(-d1* time)
             temp1 <- c(-tmat[1,2]*e1, (1-tmat[1,2]^2)(1-
             array(c(e1, tmat[1,2:4]*(1-e1)/d1,
                     0,1,0,0,  0,0,1,0,  0,0,0,1), 4, 4)
         }
                 else {
                     d1 <- tmat[1,2]*exp(-time*tmat[1,2])
                     matrix(c(d1, 0, 1-d1, 0), 2, 2)
                 }
             })
@ 
