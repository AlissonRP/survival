\section{Matrix exponential}
Multi-state survival curves start with a transitions matrix $T$,
of dimension from=nstate and to=nstate.
Say we are looking at a particular time point with the following
counts:
\begin{center}
  \begin{tabular}{cccc}
    &\multicolumn{3}{c}{To} \\
    & A & B & C \\ \hline
  A & 91 & 5 & 4 \\
  B &   3 & 50 & 0 \\
  C &   0 & 21 & 50 
  \end{tabular}
\end{center}

The transition rates at this point in time are 
$\lambda_{AB} = 5/100$ = transitions from A to B,
$\lambda_{AC} = 4/100$, $\lambda_{BA} = 3/53$, etc.
$T$ is a matrix of these rates; every row sums to 1: everyone has to either
transition to somewhere else or stay put at any given time point.
There are two ways to update the vector $p$ of occupancy probabilities at
the time point, either the direct (Aalen-Johansen) method
\eqref{matexp1} or the exponential method \eqref{matexp2}.
\begin{eqnarray}
  p(s) &= p(s-) T(s) \label{matexp1} \\
  p(s) &= p(s-) exp(T(s)-I) \label{matexp2} \\
       &= p(s-) exp(A(s)) \nonumber
\end{eqnarray}

The first of these is dominant for the raw data, the second for survival curves
after a Cox model; the code allows for either estimate.
A matrix exponential is fairly easy, just use the matexp() function from
the Matrix package, but when computing a robust variance we need the derivative
of the function, and that is substantially harder.
The code takes a 3 pronged approach: explicit algebra, matrix factors, and
last the general case.
For the first two the fact that off diagonal elements are all $\ge 0$ plays
an important role.

First, for a small number of states the matrix exponential can sometimes be
written in closed form.
For instance, consider a 3 state competing risks problem, for which we have
\begin{eqnarray*}
  A &= \left( \begin{array}{ccc} -(a+b) & a & b \\ 0 & 0 & 0\\ 0 & 0 & 0 
  \end{array} \right) \\
exp(A) &= B \\
       &= \left( \begin{array}{ccc}
  e^{-(a+b)} & a (1- e^{-(a+b)})/(a+b) & b (1- e^{-(a+b)})/(a+b) \\
  0 & 1 & 0 \\ 0 & 0 & 1 \end{array} \right)
\end{eqnarray*}
The elementwise derivative with respect to $w_i$, the weight of the $i$th 
subject, will have elements of the form 
$$
\frac{\partial B_{jk}}{\partial a}\frac{\partial a}{\partial w_i} +
\frac{\partial B_{jk}}{\partial b}\frac{\partial b}{\partial w_i}
$$ 

A second strategy applies to matrices that are easily factored.
If $A= UDU'$ then $\exp(A) = U \exp(D) U'$ where $D$ is a diagonal
matrix of eigenvalues.  This holds whenever the diagonal elements of $D$
are unique.  Such a decomposition is particularly easy to create if
$A$ is upper triangular, which will be the case whenever there are no
loops in the state space. In this case the derivative is also fairly 
easy to create. 
The last approach is to use a Pade approximation.

For the first case we create a list object \code{dexp} that contains
the solution for selected small matrices.
(This may actually cover a substantial fraction of the practical problems.)
Each element has the dimension of the matrix, the location of
active elements (off diagonal and non-zero), 
a function to compute the matrix exponential and another to
compute the derivative. 
The result of the latter will be an array with one slice for each active
element. 

An important source for creating this set of functions was the maxima package
for symbolic algebra.  The inspiration for the routine, and an excellent
set of checks for it, is the analyticp.c routine in the msm package.  The
latter contains matrix exponentials but not deriviatives, otherwise I would
have simply copied it wholesale.
Here is a simple maxima program corresponding to the 2 state, 2 transition case.

<<maxima>>=
/* the matrix exponential itself */
tmat : matrix([-a,a], [b,-b]);
etmat: matrixexp(tmat, t);

d1:  a+b;
e1 : exp(-d1*t);
test: matrix([(a*e1 +b)/d1, (a-a*e1)/d1], [(b-b*e1)/d1, (a+b*e1)/d1]);
expand(test- etmat);  /* should be all zeros */

deriv1a: diff((b + a*e1)/d1, a);
test: e1*(1-a*t)/d1 - (a*e1 +b)/d1^2;
expand(test - deriv1a);  /* should print a 0 */

deriv2a: diff((a-a*e1)/d1, a);
deriv3a: diff((b-b*e1)/d1, a);
deriv4a: diff((a+ b*e1)/d1, a);

deriv1b: diff((b + a*e1)/d1, b);
deriv2b: diff((a-a*e1)/d1, b);
deriv3b: diff((b-b*e1)/d1, b);
deriv4b: diff((a+ b*e1)/d1, b);
@ 

Since the starting matrix $A$ is a transtion matrix, exp(At) must always have
row sums of 1.  (Row $k$ is the probability distribution, post transition, of
those who start in state $k$: everyone has to go somewhere.)
For the same reason, the row sums of the derivatives must always be 0: if more
go to one place then fewer go to another.  
This can act as a check on our algebra.

<<sexpm>>=
sexpm <- list(
    <<dexp2>>
    <<dexp3>>
    <<dexp4>>
    )
@ 

The simplest case of two states and one or 2 transitions.
<<dexp2>>=
d2a= list(nstate =2, nonzero=3,
          # 2 states 1 transition
          mexp = function(tmat, time, eps=1e-8) {
              a <- tmat[1,2]
              if (a < eps)  # no events
                  matrix(c(1,0,0,1), 2, 2)
              else {
                  e1 <- exp(-time * a)
                  matrix(c(e1, 0, 1-e1, 1), 2,2)
              }
          },
          deriv = function(tmat, time, eps= 1e-8) {
              if (tmat[1,2] < eps) array(0, dim=c(3,3,1))
              else {
                  d1 <- time *exp(-time*tmat[1,2])
                  array(c(-d1, 0, d1, 0), dim=c(2,2,1))
              }
          }
          ),

d2b = list(nstate=2, nonzero=2:3,
     # 2 states, 2 transitions
     mexp = function(tmat, time, eps= 1e-8) {
         a <- tmat[1,2]; b <- tmat[2,1]
         d1 <- a+b
         if (d1< eps) 
             matrix(c(1,0,0,1), 2, 2)
         else {
             e1 <- exp(-d1*time)
             matrix(c(b + a*e1, 
                      b - b*e1, 
                      a - a*e1, 
                      a + b*e1), 2, 2)/d1
 
         }
     },
     deriv = function(tmat, time, eps = 1e-8) {
         a <- tmat[1,2]; b <- tmat[2,1]
         d1 <- a+b
         if (d1 < eps) array(0, c(2,2,2))
         else {
             e1 <- exp(-d1*time)
             partial.a <- c(e1*(1-a*time)/d1 - (a*e1 + b)/d1^2,
                            (b/d1)*(time*e1 - (1-e1)/d1),
                            (1 + a*time*e1 -e1)/d1 -a*(1-e1)/d1^2,
                            -(b/d1)*(time*e1 - (1-e1)/d1))
             partial.b <- c(-(a/d1)*(time*e1 - (1-e1)/d1),
                            (1+ b*time*e1 - e1)/d1 - b*(1-e1)/d1^2,
                            (a/d1)*(time*e1 - (1-e1)/d1),
                            (1-b*time)*e1/d1 - (b*e1 -a)/d1^2)
             array(c(partial.b, partial.a), dim=c(2,2,2))
         }
     }
),
@ 

Competing risks for 3, 4, \ldots states.  Here is the analytic form
for 4 states, the others are similar.

\begin{eqnarray}
  A& = \left( \begin{array}{cccc}
    -(a+b+c) & a & b & c \\ 0& 1 & 0 & 0 \\0& 0 & 1 & 0 \\ 0 &0 &0 &1 \\
    \end{array} \right) \\
  exp(At) &= \left( \begin{array}{cccc}
    e^{-(a+b+c)t} & a(1- e^{-(a+b+c)t})/(a+b+c) &   
    b(1- e^{-(a+b+c)t})/(a+b+c)& c(1- e^{-(a+b+c)t})/(a+b+c) \\
    0 &1 &0 &0 \\ 0 &0 &1 &0 \\ 0 &0 &0 &1 \\
  \end{array} \right)
\end{eqnarray}

  
<<dexp3>>=
# 3 states, 2 transitions, competing risks
d3a = list(nstate =3, nonzero=c(4,7),
           mexp = function(tmat, time, eps= 1e-8) {
               d1 <- tmat[1,2] + tmat[1,3]
               if (d1< eps) diag(3)
               else {
                   e1 <- exp(-time* d1)
                   e2 <- (1-e1)/d1
                   matrix(c(e1   ,        0, 0, 
                            tmat[1,2]*e2, 1, 0,
                            tmat[1,3]*e2, 0, 1), 3, 3)
               }       
           },  
           deriv = function(tmat, time, eps= 1e-8) {
               d1 <- tmat[1,2] + tmat[1,3]
               if (d1 < eps) array(0, dim=c(3,3,2))
               else {
                   a <- tmat[1,2]; b <- tmat[1,3];
                   e1 <- exp(-d1* time)
                   e2 <- (1-e1)/d1
                   temp1 <- c(-time*e1, (1+ a*time*e1 - e1)/d1 + a*(e1-1)/d1^2,
                              (b/d1)*(time*e1 + (e1-1)/d1))
                   temp2 <- c(-time*e1, (a/d1)*(time*e1 + (e1-1)/d1),
                              (1 + b*time*e1 -e1)/d1 + b*(e1-1)/d1^2)
                   dmat <- array(0, dim=c(3,3,2))
                   dmat[1,,1] <- temp1
                   dmat[1,,2] <- temp2
                   dmat
               }
           }
           ),

# 4 states 3 transitions, competing risks
d3b = list(nstate=4, nonzero=c(5,9,13),
     mexp = function(tmat, time, eps=1e-8) {
         d1 <- tmat[1,2] + tmat[1,3] + tmat[1,4]
         if (d1< eps) diag(4)
         else {
             e1 <- exp(-d1*time)
             temp <- c(e1, 0, 0, 0, 
                       tmat[1,2]*(1-e1)/d1, 1, 0, 0,
                       tmat[1,3]*(1-e1)/d1, 0, 1, 0,
                       tmat[1,4]*(1-e1)/d1, 0, 0, 1)
             matrix(temp, 4, 4)
         }
     },
     deriv = function(tmat, time, eps= 1e-8) {
         r1 <- tmat[1,2]; r2 <- tmat[1,3]; r3 <- tmat[1,4]
         d1 <- r1+r2+r3
         if (d1 < eps) array(0, dim=c(4,4,3))
         else {
             e1 <- exp(-time*d1)
             temp1 <- c(-time*e1, (1 + r1*time*e1)/d1 + r1*(e1-1)/d1^2,
                        (r2/d1)*(time*e1 + (e1-1)/d1), 
                        (r3/d1)*(time*e1 + (e1-1)/d1))
             temp2 <- c(-time*e1,  (r1/d1)*(time*e1 + (e1-1)/d1),
                        (1 + r2*time*e1)/d1 + r2*(e1-1)/d1^2,
                        (r3/d1)*(time*e1 + (e1-1)/d1))
             temp3 <- c(-time*e1,  (r1/d1)*(time*e1 + (e1-1)/d1),
                        (r2/d1)*(time*e1 + (e1-1)/d1),
                        (1 + r3*time*e1)/d1 + r3*(e1-1)/d1^2)
             dmat <- array(0, dim=c(4,4,3))
             dmat[1,,1] <- temp1  # derivatives wrt r1
             dmat[1,,2] <- temp2  # derivatives wrt r2
             dmat[1,,3] <- temp3  # derivatives wrt r3
             dmat
         }
     }
     ),

# 5 states 4 transitions, competing risks
d3c = list(nstate=5, nonzero=c(6,11,16, 21),
     mexp = function(tmat, time, eps = 1e-8) {
         d1 <- tmat[1,2] + tmat[1,3] + tmat[1,4]+ tmat[1,5]
         if (d1< eps) diag(5)
         else {
             e1 <- exp(-d1*time)
             temp <- c(e1, 0, 0, 0, 0,
                       tmat[1,2]*(1-e1)/d1, 1, 0, 0, 0,
                       tmat[1,3]*(1-e1)/d1, 0, 1, 0, 0,
                       tmat[1,4]*(1-e1)/d1, 0, 0, 1, 0,
                       tmat[1,5]*(1-e1)/d1, 0, 0, 0, 1)
             matrix(temp, 5, 5)
         }
     },
     deriv = function(tmat, time, eps= 1e-8) {
         r1 <- tmat[1,2]; r2 <- tmat[1,3]; r3 <- tmat[1,4]; r4 <- tmat[1,5];
         d1 <- r1 + r2 + r3 + r4
         if (d1 < eps) return(array(0, dim=c(5,5,4)))

         e1 <- exp(-time*d1)
         temp1 <- c(-time*e1, (1 + r1*time*e1)/d1 + r1*(e1-1)/d1^2,
                    (r2/d1)*(time*e1 + (e1-1)/d1), 
                    (r3/d1)*(time*e1 + (e1-1)/d1),
                    (r4/d1)*(time*e1 + (e1-1)/d1))
         temp2 <- c(-time*e1,  (r1/d1)*(time*e1 + (e1-1)/d1),
                    (1 + r2*time*e1)/d1 + r2*(e1-1)/d1^2,
                    (r3/d1)*(time*e1 + (e1-1)/d1),
                    (r4/d1)*(time*e1 + (e1-1)/d1))
         temp3 <- c(-time*e1,  (r1/d1)*(time*e1 + (e1-1)/d1),
                    (r2/d1)*(time*e1 + (e1-1)/d1), 
                    (1 + r3*time*e1)/d1 + r3*(e1-1)/d1^2,
                    (r4/d1)*(time*e1 + (e1-1)/d1))
         temp4 <- c(-time*e1,  (a/d1)*(time*e1 + (e1-1)/d1),
                    (r2/d1)*(time*e1 + (e1-1)/d1), 
                    (r3/d1)*(time*e1 + (e1-1)/d1),
                    (1 + r4*time*e1)/d1 + r4*(e1-1)/d1^2)
         dmat <- array(0, dim=c(5,5,4))
         dmat[1,,1] <- temp1
         dmat[1,,2] <- temp2
         dmat[1,,3] <- temp3
         dmat[1,,4] <- temp4
         dmat
     }
     ),
@ 

Sequential transtions for for 2,3,.. states, all connected to a terminal
death state.

<<dexp4>>=
# 2 + death
d4a = list(nstate=3, nonzero = c(4, 7, 8),
           mexp = function(tmat, time, eps= 1e-8) {
               r1 <- tmat[1,2]; r2 <- tmat[1,3]; r3 <- tmat[2,3]
               d1 <- r3- (r1 + r2)
               e1 <- exp(-(r1 + r2)*time) 
               if (r1 + r2 + r3 < eps) diag(3)
               else if (r3 < eps) dexp["3a"]$mexp(tmat, time, eps)
               else if (abs(d1) < eps) {
                   matrix(c(e1, 0, 0, 
                            r1*time*e1, e1, 0,
                            1- e1*(1 + r1*time), 1- e1, 1), 3, 3)
               }
               else {
                   e2 <- exp(-r3*time)
                   matrix(c(e1, 0, 0,
                          r1*(e1 -e2)/d1, e2, 0,
                          (r2-r3)*e1/d1 +r1*e2/d1 + 1, 1-e2, 1), 3, 3)
               }
           },

           deriv = function(tmat, time, eps= 1e-8) {
               r1 <- tmat[1,2]; r2 <- tmat[1,3]; r3 <- tmat[2,3]
               d1 <- r3- (r1 + r2)
               e1 <- exp(-(r1 + r2)*time)               
               if (r1 + r2 + r3 < eps) array(0, 3, 3, 3)
               else if (r3 < eps)  sexpm["3a"]$deriv(tmat, time, eps)
               else if (abs(d1) < eps) {
                   temp1 <- c(-time* e1, 0, 0,
                              time*e1*(1- time*r1), -time*e1, 0,
                              r1* time^2 * e1, time*e1, 0)
                   temp2 <- c(-time*e1, 0, 0,
                              -a*time^2* e1, -time*e1,  0,
                              time*e1*(1 + time*r1), time*e1, 0)
                   temp3 <- temp1 + temp2  # r3  = r1 + r2 
                   array(c(temp1, temp2, temp3), dim=c(3,3,3))
               }
               else {
                   # this case should be 99% of the calls
                   temp1 <- c(-time*e1, 0, 0, 0)
                   temp1
               }
           }
)
                              
@
