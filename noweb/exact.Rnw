\section{Exact partial likelihood}
Let $r_i = \exp{X_i\beta}$ be the risk score for observation $i$.
Assume that there are $d$ tied deaths at some time amoung $n$
subjects at risk.  Then the log-likelihood contributions at that
point in time are
\begin{align*}
  L &= \sum_{i=1}^d \log(r_i) - \log(D) \\
  \frac{\partial L}{\partial \beta_j} &= x_{ij} -  
               \frac{\frac{\partial D}{\partial \beta_j}}{D} \\
  \frac{\partial^2 L}{\parial \beta_j \partial \beta_k} &=
  (1/D^2)\left[D\frac{\partial^2D}{\parial \beta_j \partial \beta_k} -
      \frac{\partial D}{\partial \beta_j}\frac{\partial D}{\partial \beta_k}
       \right]
\end{align*}
The hard part of this computation is $D$, which is a sum
\begin{equation*}
  D = \sum_{S(d,n)} r_{s_1}r_{s_2} \ldots r_{sd}
\end{equation}
where $S(d,n)$ is the set of all possible subsets of size $d$ from $n$
objects, and $s_1, s_2, \ldots$ indexes the current selection.

The brute force computation of all subsets can take a very long time.
Gail et al \cite{Gaill81} show simple recursion formulas that speed
this up considerably.  Let $D(d,n)$ be the denominator with $d$
deaths and $n$ subjects.  Then
\begin{align}
  D(d,n) &= r_nD(d-1, n-1) + D(d, n-1)  \label{d0}\\
  \frac{\partial D(d,n)}{\partial \beta_j} &=
      \frac{\partial D(d, n-1)}{\partial \beta_j} +
      r_n \frac{\partial D(d-1, n-1)}{\partial \beta_j} +
      x_{nj}r_n D(d-1, n-1) \label{d1}\\
 \frac{\partial^2D(d,n}{\parial \beta_j \partial \beta_k} &=
   \frac{\partial^2D(d,n-1}{\parial \beta_j \partial \beta_k} +
     r_n\frac{\partial^2D(d-1,n-1}{\parial \beta_j \partial \beta_k} +
     x_{nj}r_n\frac{\partial D(d-1, n-1)}{\partial \beta_j} + \\
     &  x_{nk}r_n\frac{\partial D(d-1, n-1)}{\partial \beta_k} +
      x_{nk}x_{nj}r_n D(d-1, n-1) \label{d2}
\end{align*}

The above recursion is captured in the three routines below.
The first calculates $D$. 
It is called with $d$, $n$, an array that will contain all the 
values of $D(d,n)$ computed so far, and the the first dimension of the array.
The intial condition $D(0,n)=1$ is important to all three routines.

<<excox-recur>>=
double coxd0(int d, int n, double *score, double *dmat,
             int nrow) {
    double *dn;
    if (d==0) return(1.0);
    dn = dmat + (n-1)*nrow + d -1;  /* pointer to dmat[d][n] */
    if (*dn ==0) {  /* still to be computed */
	*dn = score[n-1]* coxd0(d-1, n-1, score, dmat, nrow);
    	if (d<n) *dn += coxd0(d, n-1, score, dmat, nrow);
    }
    return(*dn);
}
@ 

The next routine calculates the derivative with respect to a particular
coefficient. It will be called separately and with a separate array
\texttt{d1} and covariate vector for each variable.
The second derivative calculation is per pair of variables; the
\texttt{d1j} and \texttt{d1k} arrays are the appropriate first derivative
arrays of saved values.

<<excox-recur>>=
double coxd1(int d, int n, double *score, double *dmat, double *d1,
	     double *covar, int nrow) {
    
    indx = (n-1)*nrow + d -1;  /*index to the current array member d1[d][n]*/
    if (d1[indx] ==0) { /* still to be computed */
	d1[indx] = score[n-1]* covar[n-1]* coxd0(d-1, n-1, score, dmat, nrow);
	if (d<n) d1[indx] += coxd1(d, n-1, score, dmat, d1, covar, nrow);
	if (d>1) d1[indx] += score[n-1]*
	                coxd1(d-1, n-1, score, dmat, d1, covar, nrow);
    }
    return(d1[indx]);
}

double coxd2(int d, int n, double *score, double *dmat, double *d1j,
             double *d1k, double *d2, double *covarj, double *covark,
             int nrow) {
    int indx;
    
    indx <- (n-1)*nrow + d -1;  /*index to the current array member d1[d][n]*/
    if (d2[indx] ==0) { /*still to be computed */
	d2[indx] = coxd0(d-1, n-1, scorfe, dmat, nrow)*score[n-1] *
	    covarj[n-1]* covark[n-1];
	if (d<n) d2[index] += coxd2(d, n-1, score, dmat, d1j, d1k, d2, covarj, 
				  covark, nrow);
	if (d>1) d2[index] += score[indx] * (
	    coxd2(d-1, n-1, score, dmat, d1j, d1k, d2, covarj, covark, nrow) +
	    covarj[n-1] * coxd1(d-1, n-1, dmat, d1j, covarj, nrow)+
	    covark[n-1] *coxd1(d-1, n-1, dmat, d1j, covarj, nrow));
	}
    return(d2[indx]);
}
@ 
    
Now for the main body.  Start with the dull part of the code:
declarations.
I use [[maxiter2]] for the
S structure and [[maxiter]] for the variable within it, and
etc for the other input arguments.
All other input arguments are treated as read only.
<<coxexact>>=
#include <math.h>
#include "survS.h"
#include "survproto.h"

<<agcox-recur>>

SEXP coxexact(SEXP maxiter2,  SEXP y2, 
	      SEXP covar2,    SEXP offset2, SEXP ibeta,
	      SEXP strata2,   SEXP eps2,    SEXP toler2) {
    int i,j,k, person;
    int     iter;
    
    double **covar, **imat;  /*ragged arrays */
    double *time, *status;   /* input data */
    int    *strata;
    double *a, *newbeta;
    double  zbeta, risk;
    double  ndead;
    double  newlk=0;
    int     halving;    /*are we doing step halving at the moment? */
    int     nrisk;   /* number of subjects in the current risk set */
  
    /* copies of scalar input arguments */
    int     n, nvar, maxiter;
    double  eps, toler;
    
    /* returned objects */
    SEXP imat2, means2, beta2, u2, loglik2;
    double *beta, *u, *loglik;
    SEXP rlist, rlistnames;
    int nprotect;  /* number of protect calls I have issued */
    
    <<excox-setup>>
    <<excox-strata>>	  
    <<excox-iter1>>
    <<excox-iter>>
    <<excox-finish>>
    }
@ 

Setup is ordinary.  Grab S objects and assign others.
I use \verb!R_alloc! for temporary ones since it is released automatically on
return.
<<excox-setup>>=
nused = LENTGH(covar2);
nvar  = NCOL(covar2);
method = asInteger(method2);
maxiter = asInteger(maxiter2);
eps  = asReal(eps2);     /* convergence criteria */
toler = asReal(toler2);  /* tolerance for cholesky */

/*
**  Set up the ragged array pointer to the X matrix,
**    and pointers to time and status
*/
covar= dmatrix(REAL(covar2), nused, nvar);
time = REAL(y2);
status = y2 +n;
strata = INTEGER(PROTECT(duplicate(strata2)));

/* 
** create output variables
*/ 
PROTECT(beta2 = duplicate(ibeta));
beta = REAL(beta2);
PROTECT(u2 = allocVector(REALSXP, nvar));
u = REAL(u2);
PROTECT(imat2 = allocVector(REALSXP, nvar*nvar)); 
imat = dmatrix(REAL(imat2),  nvar, nvar);
PROTECT(loglik2 = allocVector(REALSXP, 5)); /* loglik, sctest, flag,maxiter*/
loglik = REAL(loglik2);
nprotect = 5;
@ 

The data passed to us has been sorted by strata, and 
reverse time within strata (longest subject first).
The variable [[strata]] will be 1 at the start of each new strata.
Separate strata are completely separate computations: time 10 in
one strata and time 10 in another are not comingled.
Compute the largest product (size of strata)*
(max tied deaths in strata) for allocating scratch space.
When computing $D$ it is advantageous to create all the intermediate
values of $D(d,n)$ in an array since they will be used in the
derivative calculation.  Likewise, the first derivatives are used
in calculating the second.
Even more importantly, say we have a large data set.  It will
be sorted with the longest times first.
If there is a death with 30 at risk and another with 40 at
risk, the intermediate sums we computed for the n=30 case
are part of the computation for n=40.  To make this
work we need to index our matrices, within any strata,
by the maximum number of tied deaths in the strata.
We save this in the strata variable: first obs of a new
strata has the number of events, last has -1;

<<excox-strata>>= 
strata[0] =1;  /* in case the parent forgot */
dmem = 0;
temp =0;
maxdeath =0;
j=0;   /* start of the strata */
for (i=0; i<n;) {
  if (strata[i]==1) { /* first obs of a new strata */
      if (i>0) {
	  strata[j] = temp; /* number of deaths in the strata */
          strata[i-1] = -1;  /* marks the last obs of a strata */
	  j = i;
	  if (temp*nrisk >dmem) dmem = temp*nrisk;
          }
      if (temp > maxdeath) maxdeath = temp;
      temp=0;
      nrisk=0;
      ndeath =0;
      }
  dtime = time[i];
  while (i<n && time[i] ==dtime) {
      nrisk++;
      ndeath += status[i];
      i++;
      }
  if (ndeath > temp) temp=ndeath;
  }
if (temp*nrisk >dmem) dmem = temp*nrisk;
if (temp > maxdeath) maxdeath=temp;
mstrata[j] = temp;

/* Now allocate memory for the scratch arrays 
   Each per-variable slice is of size dmem 
*/
dmemtot = dmem * (nvar*(nvar+1))/2 + nvar + 1;
dmem0 = (double *) Calloc(dmemtot, sizeof(double)); /*pointer to memory */
dmem1 = (double **) Calloc(nvar, sizeof(double*));
dmem1[0] = dmem0 + dmem; /*points to the first derivative mem */
for (i=1; i<nvar; i++) dmem1[i] = dmem1[i-1] + dmem;
dmem2 = dmem1[nvar-1] + dmem;  /* second derivatives */

d1 = (double *) Calloc(nvar, sizeof(double)); /*first deriv results */
@

Here is a standard iteration step. Walk forward to a new time,
then through all the ties with that time. 
If there are any deaths, the contributions to the loglikilihood,
first, and second derivatives at this time point are
\begin{align}
  L &= \left(\sum_{i \in deaths} X_i\beta\right) - \log(D) \\
  \frac{\partial L}{\partial \beta_j} &= \left(\sum_{i \in deaths} X_{ij} \right) -
   \frac{\partial D(d,n)}{\partial \beta_j} D^{-1}(d,n) \\
   \frac{\partial^2 L }{\partial \beta_j \partial \beta_k} &=
     \frac{\partial^2 D(d,n) }{\partial \beta_j \partial \beta_k} D^{-1}(d,n) -
     \frac{\partial D(d,n)}{\partial \beta_j}
     \frac{\partial D(d,n)}{\partial \beta_k} D^{-2}(d,n)
\end{align}

<<excox-addup>>=
for (i=0; i<n; ) {
    if (strata[i] >0) { /* first obs of a new strata */
        maxdeath= strata[i];
        dtemp = dptr;
        for (j=0; j<dmemtot; j++) *dtemp++ =0.0;
	sstart =i;
	nrisk =0;
    }
    
    xtime = time[i];  /*current unique time */
    ndeath =0;
    while (time[i] == xtime) {
	zbeta=0;
	for (j=0; j<nvar; j++) zbeta += covar[j][i] * beta[j];
	score[i] = exp(zbeta);
	if (status[i]==1) {
	    newlik += zbeta;
	    for (j=0; j<nvar; j++) u[j] += covar[j][i];
	    ndeath++;
	    }
	nrisk++;
	i++;
	if (strata[i] <0) break; /* last obs of a strata */
    	}
    
    /* We have added up over the death time, now process it */
    if (ndeath >0) { /* Add to the loglik */
	d0 = coxd0(ndeath, nrisk, score+sstart, dmem0, maxdeath);
	newlik -= log(d0);
	dmem2 = dmem0 + (nvar+1)*dsize;  /* start for the second deriv memory */
	for (j=0; j<nvar; j++) { /* for each covariate */
	    dtemp += dsize; /*memory for jth derivative */
	    d1[j] = coxd1(ndeath, nrisk, score+sstart, dmem0, dmem1[j], 
                       covar[j]+sstart, maxdeath) / d0;
	    u[j] -= d1[j];
	    for (k=0; k<= j; k++) {  /* second derivative*/
		temp = coxd2(ndeath, nrisk, score+sstart, dmem0, dmem1[j],
			     dmem1[k], dmem22, covar[j] + sstart, 
                             covar[k] + sstart, maxdeath);
		imat[j][k] += temp/d0 - d1[j]*d1[k];
		dmem2 += dsize;
		}
	    }
	}
    }
@ 
        
Do the first iteration of the solution.  The first iteration is
different in 3 ways: it is used to set the initial log-likelihood,
to compute the score test, and
we pay no attention to convergence criteria or diagnositics.
(I expect it not to converge in one iteration).

<<excox-iter0>>=
/*
** do the initial iteration step
*/
newlik =0;
for (i=0; i<nvar; i++) {
    u[i] =0;
    for (j=0; j<nvar; j++)
        imat[i][j] =0 ;
    }
<<excox-addup>>

loglik[0] = newlk;   /* save the loglik for iteration zero  */
loglik[1] = newlik;  /* and it is our current best guess */
/* 
**   update the betas and compute the score test 
*/
for (i=0; i<nvar; i++) /*use 'd1' as a temp to save u0, for the score test*/
    d1[i] = u[i];

loglik[3] = cholesky2(imat, nvar, *tol_chol);
chsolve2(imat,nvar,d1);        /* u replaced by  u *inverse(imat) */

loglik[2] =0;
for (i=0; i<nvar; i++)
    loglik[2] +=  u[i]*d1[i];

if (maxiter==0) {
    iter =0;  /*number of iterations */
    <<excox-finish>>
    }
/*
**  Never, never complain about convergence on the first step.  That way,
**  if someone has to they can force one iter at a time.
*/
for (i=0; i<nvar; i++) {
    oldbeta[i] = beta[i];
    beta[i] = beta[i] + u[i];
    }
@

Now the main loop.  This has code for convergence and step halving.
Be careful about order.  For our current guess at the solution
beta:
\begin{enumerate}
  \item Compute the loglik, first, and second derivatives
  \item If the loglik has converged, return beta and information
    about it.  Don't update beta.
  \item If not converged
    \begin itemize
      \item If The loglik got worse try beta= (beta + oldbeta)/2
      \item Otherwise update beta
     \end{itemize}
\end{enumerate}

<<excox-iter>>=
halving =0 ;             /* =1 when in the midst of "step halving" */
for (iter=1; iter<=*maxiter; iter++) {
    newlk =0;
    for (i=0; i<nvar; i++) {
        u[i] =0;
        for (j=0; j<nvar; j++)
    	    imat[i][j] =0;
        }
    <<excox-addup>>
       	
    /* am I done?
    **   update the betas and test for convergence
    */
    loglik[3] = cholesky2(imat, nvar, *tol_chol); 

    if (fabs(1-(loglik[1]/newlk))<=*eps && halving==0) { /* all done */
        loglik[1] = newlk;
       <<excox-finish>>
        }

    if (iter==*maxiter) break;  /*skip the step halving and etc */

    if (newlk < loglik[1])   {    /*it is not converging ! */
    	halving =1;
    	for (i=0; i<nvar; i++)
    	    beta[i] = (oldbeta[i] + beta[i]) /2; /*half of old increment */
    	}
    else {
    	halving=0;
    	loglik[1] = newlk;
    	chsolve2(imat,nvar,u);

    	for (i=0; i<nvar; i++) {
    	    oldbeta[i] = beta[i];
    	    beta[i] = beta[i] +  u[i];
    	    }
    	}
    }   /* return for another iteration */


/*
** Ran out of iterations 
*/
loglik[1] = newlk;
loglik[3] = 1000;  /* signal no convergence */
<<excox-finish>>
}
@

The common code for finishing.  Invert the information matrix, copy it
to be symmetrc, and put together the output structure.

<<excox-finish>>=
loglik[4] = iter;
chinv2(imat, nvar);
for (i=1; i<nvar; i++)
    for (j=0; j<i; j++)  imat[i][j] = imat[j][i];

PROTECT(rlist= allocVector(VECSXP, 4));
SET_VECTOR_ELT(rlist, 0, beta2);
SET_VECTOR_ELT(rlist, 1, u2);
SET_VECTOR_ELT(rlist, 2, imat2);
SET_VECTOR_ELT(rlist, 3, loglik2);

/* add names to the objects */
PROTECT(rlistnames = allocVector(STRSXP, 4));
SET_STRING_ELT(rlistnames, 0, mkChar("coef"));
SET_STRING_ELT(rlistnames, 1, mkChar("u"));
SET_STRING_ELT(rlistnames, 2, mkChar("imat"));
SET_STRING_ELT(rlistnames, 3, mkChar("loglik"));
setAttrib(rlist, R_NamesSymbol, rlistnames);

unprotect(nprotect+2);
return(rlist);
@ 
