\subsubsection{Multi-state models}
Survival curves after a multi-state Cox model are more challenging,
particularly the variance.

The first step in the computation is to compute the hazard functions for
each of the transtions.  Each of these hazards a completely independent
computation: nothing is shared.  
A subject sitting in some state A, at risk for transition to B and C, might
have different covariates and/or coefficients, and thus different risk scores
for the two transitions. 
Because of this, there is no difference, for the first part of the code, between
computing single endpoint or multiple endpoint curves, their variance, or their
influence functions. 

The second step of creating p(state) curves uses all of the state1:state2
hazard functions at once, however.  For this reason we use a different 
hazard routine, which returns those hazard functions at a common set of
time points.
 
<<coxsurvfit>>=
coxsurv.fit2 <- function (ctype, stype, se.fit, 
                          varmat, cluster, cmap, tmat, states,
                          y, x, weights, risk, position, strata, id,
                          transition, y2, x2, risk2, strata2, id2) {
    # args are the options (ctype, stype, se.fit), args info from the prior fit
    # (varmat, ..., tmat), original data (Y, ..., transition), and data for the
    # new subjects

    if (length(strata)==0) strata <- rep(0L, nrow(y))

    if (is.factor(strata)) ustrata <- levels(strata)
    else                   ustrata <- sort(unique(strata))
    nstrata <- length(ustrata)
    survlist <- vector('list', nstrata)
    names(survlist) <- ustrata

    # make the expansion map.  
    #  cmap[1,] will contain integers 1, 2,... which match the values in
    # the transtion vector, which in turn is the set of hazard functions that
    # come back from the .Call
    #  The H matrices we will need are nstate by nstate, at each time, with
    # elements that are non-zero only for observed transtions.  Some elements
    # may be the same: cmat[1,] can have repeats.
    nstate <- length(states)
    tmat <- tmat[,is.na(match(colnames(tmat), "(censored)"))]
    from <- row(tmat)[tmat>0]  # tmat contains fit$transitions matrix
    from <- match(rownames(tmat), states)[from]  # actual row of H
    to   <- col(tmat)[tmat>0]
    to   <- match(colnames(tmat), states)[to]    # actual col of H
    hfill <- cbind(from, to)

    storage.mode(position) <- "integer"  # failsafe
    storage.mode(weights) <- "double"
 
    for (i in 1:nstrata) {
        indx <- which(strata== ustrata[i])
        survlist[[i]] <- multihaz(y[indx,,drop=F], x[indx,,drop=F],
                                  position[indx], weights[indx], risk[indx],
                                  transition[indx], ctype, stype, hfill,
                                  x2, risk2, varmat, nstate, se.fit)
    }
    survlist
}

# Compute the hazard  and survival functions 
multihaz <- function(y, x, position, weight, risk, transition, ctype, stype, 
                     hfill, x2, risk2, vmat, nstate, se.fit) {
    sort1 <- order(transition, y[,1]) -1L
    sort2 <- order(transition, y[,2]) -1L
    event <- y[,3] > 0
    utime <- c(0, sort(unique(y[event,2])))  #unique times, start and death
    ntime <- length(utime)

    # this returns all of the counts we might desire.
    fit <- .Call("coxsurv2", utime, y, weight, sort1, sort2, position, 
                        transition, x, risk)
    cn <- fit$count  # 1-3 = at risk, 4-6 = events, 7-8 = censored events
                     # 9-10 = censored, 11-12 = Efron, 13-15 = entry
    denom1 <- ifelse(cn[,4]==0, 1, ifelse(ctype==1, cn[,3], cn[,11]))
    denom2 <- ifelse(cn[,4]==0, 1, ifelse(ctype==1, cn[,3]^2, cn[,12]))

    hazard <- matrix(cn[,5] / denom1, ncol = fit$nstrat)
    varhaz <- matrix(cn[,5] / denom2, ncol = fit$nstrat)

    # Expand the result, one "hazard set" for each row of x2
    nx2 <- nrow(x2)
    jj <- 1:nrow(hazard)
    h2 <- matrix(0, nrow(hazard)*nx2, ncol(hazard))
    if (se.fit) v2 <- h2
    S <- matrix(0, nrow(hazard), nstate)
    S2 <- matrix(0, nrow(j2), nstate)
 
    H <- matrix(0, nstate, nstate)
    p0 <- matrix(cn[,3], nrow=time)
    p0 <- p0/sum(p0)

    for (i in 1:nx2) {
        h2[jj,] <- apply(hazard * risk2[i], 2, cumsum)
        if (se.fit) {
            d1 <- fit$xbar - rep(x[i,], each=nrow(fit$xbar))
            d2 <- apply(d1*hazard, 2, cumsum)
            d3 <- rowSums((d2%*% vmat) * d2)
            v2[jj,] <- (apply(varhaz[jj,],2, cumsum) + d3) * (risk2[i])^2
        }

        S[1,] <- p0
        for (j in 2:ntime) {
            H[hfill] <- hazard * risk2[i]
            if (stype==1) {
                diag(H) <- pmin(0, 1 + diag(H)- rowSums(H))
                S[i,] <- S[i-1,] %*% H
            }
            else {
                diag(H) <- diag(H) - rowSums(H)
                S[i,] <- S[i-1,] %*% expm(H)
            }
        }
        S2[jj,] <- S
        jj <- jj+ nrow(hazard)
    }

    rval <- list(time=rep(utime, nx2), xgrp=rep(1:nx2, each=nrow(hazard)),
                 pstate=S2, cumhaz=h2)
    if (se.fit) rval$varhaz <- v2
    rval
}
@


