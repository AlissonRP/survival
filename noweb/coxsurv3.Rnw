\subsubsection{Multi-state models}
Survival curves after a multi-state Cox model are more challenging,
particularly the variance.

<<survfit.coxphms>>=
survfit.coxphms <-
function(formula, newdata, se.fit=TRUE, conf.int=.95, individual=FALSE,
         stype=2, ctype, 
         conf.type=c("log", "log-log", "plain", "none", "logit", "arcsin"),
         censor=TRUE, start.time, id, influence=FALSE,
         na.action=na.pass, type, ...) {

    Call <- match.call()
    Call[[1]] <- as.name("survfit")  #nicer output for the user
    object <- formula     #'formula' because it has to match survfit
    se.fit <- FALSE   #still to do

    <<survfit.coxph-setup1>>
    <<survfit.coxph-setup2>>
    <<survfit.coxphms-setupa>>
    <<survfit.coxph-setup2c>>
    <<survfit.coxph-setup3>>
    <<survfit.coxphms-setup3b>>
    <<survfit.coxphms-result>>

    cifit$call <- Call
    class(cifit) <- c("survfitcox", "survfitms", "survfit")
    cifit
}
@ 
The third line \code{as.name('survfit')} causes the printout to say
`survfit' instead of `survfit.coxph'.                              %'

Notice that setup is almost completely shared with survival for single state
models.  The major change is that we use survfitCI (non-Cox) to do all the
legwork wrt the tabulation values (number at risk, etc.),
while for the computation proper it is easier to make use of the same
expanded data set that coxph used for a multi-state fit.

<<survfit.coxphms-setupa>>=
# Rebuild istate using the mcheck routine
istate <- model.extract(mf, "istate")
mcheck <- multicheck2(Y, oldid, istate)
transitions <- mcheck$transitions
istate <- mcheck$istate
if (!identical(object$states, mcheck$states))
    stop("failed to rebuild the data set")

# Let the survfitCI routine do the work of creating the
#  overall counts (n.risk, etc).  The rest of this code then
#  replaces the surv and hazard components.
cifit <- survfitCI(as.factor(strata), Y, weights, oldid, istate, stype=stype,
                   ctype=ctype, se.fit=FALSE, start.time=start.time)

# For computing the  actual estimates it is easier to work with an
#  expanded data set.
# Replicate actions found in the coxph-multi-X chunk,
cluster <- model.extract(mf, "cluster")
xstack <- stacker(object$cmap, as.integer(istate), X, Y,
                  as.integer(strata),
                  states= object$states)
position <- position[xstack$rindex]   # id was required by coxph
X <- xstack$X
Y <- xstack$Y
strata <- strata[xstack$rindex]
transition <- xstack$transition
if (length(offset)) offset <- offset[xstack$rindex]
if (length(weights)) weights <- weights[xstack$rindex]
if (length(cluster)) cluster <- cluster[xstack$rindex]
oldid <- oldid[xstack$rindex]
if (robust & length(cluster)==0) cluster <- oldid
@ 

The coxph-setup3 chunk, shared with single state Cox models, has created
an x2 matrix.  We need to expand this so as to get one matrix for each
transition; the reason is that different transitions will often have
different covariates and different coefficients, and thus different
risk scores. 
We create an array whose first two dimensions are those of x2, and third
is the number of transtions, which is the number of columns of cmap.
The risk scores become a matrix.  

<<coxphms-setup3b>>=
x3 <- array(0., dim=c(nrow(x2), max(cmap[-1,]), ncol(cmap)))
for (i in 1:ncol(cmap)) 
    x3[, cmap[-1,i], i] <- x2[, cmap[-1,i]>0]
risk3 <- matrix(x3, ncol=ncol(cmap)) %*% object$coef
risk3 <- matrix(exp(risk3), nrow=nrow(x2))
@ 

The first step in the computation is to compute the hazard functions for
each of the transtions.  Each of these hazards a completely independent
computation: nothing is shared.  
A subject sitting in some state A, at risk for transition to B and C, might
have different covariates and/or coefficients, and thus different risk scores
for the two transitions. 
Because of this, there is no difference, for the first part of the code, between
computing single endpoint or multiple endpoint curves, their variance, or their
influence functions. 

The second step of creating p(state) curves uses all of the state1:state2
hazard functions at once, however.  For this reason we use a particular
hazard routine, which returns those hazard functions at a common set of
time points.
 
<<survfit.coxphms-result>>=
if (individual) {
    stop("time dependent survival curves not yet supported for multistate")
    result <- coxsurv.fit2(ctype, stype, se.fit, varmat, cluster,
                           object$cmap, object$transitions, object$states,
                           Y, X, weights, risk, position, strata, oldid,
                           transition, y2, x3, risk3, strata2, id2)
                          
} else {
    result <- coxsurv.fit2(ctype, stype, se.fit, varmat, cluster,
                           object$cmap, object$transitions, object$states,
                           Y, X, weights, risk, position, strata, oldid,
                           transition, y2, x3, risk3, p0=cifit$p0)

    if (is.null(cifit$strata)) {
        if (length(result)!=1)  stop("miscounted result 1")
        temp <- result[[1]]
        if (any(dim(temp$pstate) != dim(cifit$pstate))) stop("miscount 2")
        cifit$pstate <- temp$pstate
        cifit$cumhaz <- temp$cumhaz
    }
    else {
        nx <- length(cifit$strata)  # Each 'x' will be a stratum
        if (length(result) != nx) stop("miscount 3")
        new.p <- do.call(rbind, lapply(result, function(x) x$pstate))
        new.c <- do.call(rbind, lapply(result, function(x) x$cumhaz))
        if (nrow(new.p) != nrow(cifit$pstate)) stop("miscount 4")
        cifit$pstate <- new.p
        cifit$cumhaz <- new.c
    }
}

<<survfit.coxphms>>=
coxsurv.fit2 <- function (ctype, stype, se.fit, 
                          varmat, cluster, cmap, tmat, states,
                          y, x, weights, risk, position, strata, id,
                          transition, y2, x2, risk2, strata2, id2, p0) {
    # args are the options (ctype, stype, se.fit), args info from the prior fit
    # (varmat, ..., tmat), original data (Y, ..., transition), and data for the
    # new subjects

    if (length(strata)==0) strata <- rep(0L, nrow(y))

    if (is.factor(strata)) ustrata <- levels(strata)
    else                   ustrata <- sort(unique(strata))
    nstrata <- length(ustrata)
    survlist <- vector('list', nstrata)
    names(survlist) <- ustrata

    # make the expansion map.  
    #  cmap[1,] will contain integers 1, 2,... which match the values in
    # the transtion vector, which in turn is the set of hazard functions that
    # come back from the .Call
    #  The H matrices we will need are nstate by nstate, at each time, with
    # elements that are non-zero only for observed transtions.  Some elements
    # may be the same: cmat[1,] can have repeats.
    nstate <- length(states)
    tmat <- tmat[,is.na(match(colnames(tmat), "(censored)"))]
    from <- row(tmat)[tmat>0]  # tmat contains fit$transitions matrix
    from <- match(rownames(tmat), states)[from]  # actual row of H
    to   <- col(tmat)[tmat>0]
    to   <- match(colnames(tmat), states)[to]    # actual col of H
    hfill <- cbind(from, to)

    storage.mode(position) <- "integer"  # failsafe
    storage.mode(weights) <- "double"
 
    for (i in 1:nstrata) {
        indx <- which(strata== ustrata[i])
        survlist[[i]] <- multihaz(y[indx,,drop=F], x[indx,,drop=F],
                                  position[indx], weights[indx], risk[indx],
                                  transition[indx], ctype, stype, hfill,
                                  x3, risk3, varmat, nstate, se.fit, p0)
    }
    survlist
}

# Compute the hazard  and survival functions 
multihaz <- function(y, x, position, weight, risk, transition, ctype, stype, 
                     hfill, x2, risk2, vmat, nstate, se.fit, p0) {
    sort1 <- order(transition, y[,1]) -1L
    sort2 <- order(transition, y[,2]) -1L
    event <- y[,3] > 0
    utime <- c(0, sort(unique(y[event,2])))  #unique times, start and death
    ntime <- length(utime)

    # this returns all of the counts we might desire.
    fit <- .Call("Ccoxsurv2", utime, y, weight, sort1, sort2, position, 
                        transition, x, risk)
    cn <- fit$count  # 1-3 = at risk, 4-6 = events, 7-8 = censored events
                     # 9-10 = censored, 11-12 = Efron, 13-15 = entry
    if (ctype ==1) {
        denom1 <- ifelse(cn[,4]==0, 1, cn[,3])
        denom2 <- ifelse(cn[,4]==0, 1, cn[,3]^2)
    } else {
        denom1 <- ifelse(cn[,4]==0, 1, cn[,11])
        denom2 <- ifelse(cn[,4]==0, 1, cn[,12])
    }

    hazard <- matrix(cn[,5] / denom1, ncol = fit$nstrat)
    varhaz <- matrix(cn[,5] / denom2, ncol = fit$nstrat)

    # Expand the result, one "hazard set" for each row of x2
    nx2 <- nrow(x2)
    jj <- 1:nrow(hazard)
    h2 <- matrix(0, nrow(hazard)*nx2, ncol(hazard))
    if (se.fit) v2 <- h2
    S <- matrix(0, nrow(hazard), nstate)
    S2 <- matrix(0, nrow(h2), nstate)
 
    H <- matrix(0, nstate, nstate)
    for (i in 1:nx2) {
        h2[jj,] <- apply(hazard %*% diag(risk2[i,]), 2, cumsum)
        if (se.fit) {
            d1 <- fit$xbar - rep(x[i,], each=nrow(fit$xbar))
            d2 <- apply(d1*hazard, 2, cumsum)
            d3 <- rowSums((d2%*% vmat) * d2)
            v2[jj,] <- (apply(varhaz[jj,],2, cumsum) + d3) * (risk2[i])^2
        }

        S[1,] <- p0
        for (j in 2:ntime) {
            H[,] <- 0.0
            H[hfill] <- hazard[j,] *risk2[i,]
            if (stype==1) {
                diag(H) <- pmin(0, 1 + diag(H)- rowSums(H))
                S[j,] <- drop(S[j-1,] %*% H)  
            }
            else {
                diag(H) <- diag(H) - rowSums(H)
                S[j,] <- as.vector(S[j-1,] %*% expm(H))  # dgeMatrix issue
            }
        }

        S2[jj,] <- S
        jj <- jj+ nrow(hazard)
    }

    rval <- list(time=rep(utime, nx2), xgrp=rep(1:nx2, each=nrow(hazard)),
                 pstate=S2, cumhaz=h2)
    if (se.fit) rval$varhaz <- v2
    rval
}
@


